/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  BaseSecuritizeSwap,
  BaseSecuritizeSwapInterface,
} from "../../../contracts/swap/BaseSecuritizeSwap";

const _abi = [
  {
    inputs: [],
    name: "dsToken",
    outputs: [
      {
        internalType: "contract IDSToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dsToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stableCoin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_issuerWallet",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "issuerWallet",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stableCoinToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class BaseSecuritizeSwap__factory {
  static readonly abi = _abi;
  static createInterface(): BaseSecuritizeSwapInterface {
    return new Interface(_abi) as BaseSecuritizeSwapInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BaseSecuritizeSwap {
    return new Contract(address, _abi, runner) as unknown as BaseSecuritizeSwap;
  }
}
