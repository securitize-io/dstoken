/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  VersionedContract,
  VersionedContractInterface,
} from "../../../contracts/utils/VersionedContract";

const _abi = [
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405260016080818152610018916000919061002b565b5034801561002557600080fd5b50610090565b82805482825590600052602060002090810192821561006b579160200282015b8281111561006b578251829060ff1690559160200191906001019061004b565b5061007792915061007b565b5090565b5b80821115610077576000815560010161007c565b6101158061009f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80630d8e6e2c14602d575b600080fd5b60336047565b604051603e9190609d565b60405180910390f35b60606000805480602002602001604051908101604052809291908181526020018280548015609357602002820191906000526020600020905b8154815260200190600101908083116080575b5050505050905090565b6020808252825182820181905260009190848201906040850190845b8181101560d35783518352928401929184019160010160b9565b5090969550505050505056fea2646970667358221220a76bcf5e72a21dbe96dd4c306f8f7e71724412d4f99eda840df3f67d949f03d264736f6c63430008140033";

type VersionedContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VersionedContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VersionedContract__factory extends ContractFactory {
  constructor(...args: VersionedContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      VersionedContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VersionedContract__factory {
    return super.connect(runner) as VersionedContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VersionedContractInterface {
    return new Interface(_abi) as VersionedContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VersionedContract {
    return new Contract(address, _abi, runner) as unknown as VersionedContract;
  }
}
