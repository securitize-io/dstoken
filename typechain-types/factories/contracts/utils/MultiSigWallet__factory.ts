/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MultiSigWallet,
  MultiSigWalletInterface,
} from "../../../contracts/utils/MultiSigWallet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "owners_",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "threshold_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint8[]",
        name: "sigV",
        type: "uint8[]",
      },
      {
        internalType: "bytes32[]",
        name: "sigR",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "sigS",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getVersion",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ownersArr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "threshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052600160808181526200001a916000919062000362565b503480156200002857600080fd5b5060405162000f1038038062000f108339810160408190526200004b9162000459565b600a8351111580156200005f575060018351115b80156200006d575082518211155b80156200009657506002835162000085919062000554565b6200009290600162000577565b8210155b8015620000a35750600082115b620000f55760405162461bcd60e51b815260206004820152601560248201527f7468726573686f6c64206e6f7420616c6c6f776564000000000000000000000060448201526064015b60405180910390fd5b60005b8351811015620002735760006001600160a01b031684828151811062000122576200012262000593565b60200260200101516001600160a01b031603620001905760405162461bcd60e51b815260206004820152602560248201527f6f776e657220616464726573732063616e206e6f74206265207a65726f206164604482015264647265737360d81b6064820152608401620000ec565b60036000858381518110620001a957620001a962000593565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1615620002115760405162461bcd60e51b815260206004820152600f60248201526e323ab83634b1b0ba329037bbb732b960891b6044820152606401620000ec565b6001600360008684815181106200022c576200022c62000593565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806200026a81620005a9565b915050620000f8565b50825162000289906004906020860190620003b7565b506002829055604080517fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647260208201527f46d502984e082ba64ca60958f0c45ceb3f34246aa789aa5e5ed15bced9fd4e89918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a08201527fb37745e66c38577667d690143f874b67afebdda0d4baa8b47e7ec4f32a43ff1260c082015260e00160405160208183030381529060405280519060200120600581905550505050620005c5565b828054828255906000526020600020908101928215620003a5579160200282015b82811115620003a5578251829060ff1690559160200191906001019062000383565b50620003b39291506200040f565b5090565b828054828255906000526020600020908101928215620003a5579160200282015b82811115620003a557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003d8565b5b80821115620003b3576000815560010162000410565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200045457600080fd5b919050565b6000806000606084860312156200046f57600080fd5b83516001600160401b03808211156200048757600080fd5b818601915086601f8301126200049c57600080fd5b8151602082821115620004b357620004b362000426565b8160051b604051601f19603f83011681018181108682111715620004db57620004db62000426565b60405292835281830193508481018201928a841115620004fa57600080fd5b948201945b83861015620005235762000513866200043c565b85529482019493820193620004ff565b91890151604090990151919a98995090979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000826200057257634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156200058d576200058d6200053e565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201620005be57620005be6200053e565b5060010190565b61093b80620005d56000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630d8e6e2c1461005c57806342cde4e81461007a578063a0ab965314610091578063aa5df9e2146100a6578063affed0e0146100d1575b600080fd5b6100646100da565b604051610071919061059b565b60405180910390f35b61008360025481565b604051908152602001610071565b6100a461009f3660046107ac565b610132565b005b6100b96100b436600461088e565b610571565b6040516001600160a01b039091168152602001610071565b61008360015481565b6060600080548060200260200160405190810160405280929190818152602001828054801561012857602002820191906000526020600020905b815481526020019060010190808311610114575b5050505050905090565b600254875110156101a05760405162461bcd60e51b815260206004820152602d60248201527f746865726520617265206665776572207369676e617475726573207468616e2060448201526c1d1a19481d1a1c995cda1bdb19609a1b60648201526084015b60405180910390fd5b855187511480156101b2575087518751145b61020d5760405162461bcd60e51b815260206004820152602660248201527f7369676e617475726520617272617973207769746820646966666572656e74206044820152650d8cadccee8d60d31b6064820152608401610197565b6001600160a01b03821633148061022b57506001600160a01b038216155b6102775760405162461bcd60e51b815260206004820152601a60248201527f73656e646572206973206e6f7420746865206578656375746f720000000000006044820152606401610197565b3360009081526003602052604090205460ff166102e15760405162461bcd60e51b815260206004820152602260248201527f73656e646572206973206e6f7420616e20617574686f72697a6564207369676e60448201526132b960f11b6064820152608401610197565b8251602080850191909120600154604080517f3ee892349ae4bbe61dce18f95115b5dc02daf49204cc602458cd4c1f540d56d7818601526001600160a01b038a811682840152606082018a9052608082019490945260a081019290925291851660c082015260e0808201859052825180830390910181526101008201835280519084012060055461190160f01b6101208401526101228301526101428083018290528351808403909101815261016290920190925280519201919091206000805b6002548110156104f25760006001848e84815181106103c3576103c36108a7565b60200260200101518e85815181106103dd576103dd6108a7565b60200260200101518e86815181106103f7576103f76108a7565b602002602001015160405160008152602001604052604051610435949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610457573d6000803e3d6000fd5b505050602060405103519050826001600160a01b0316816001600160a01b031611801561049c57506001600160a01b03811660009081526003602052604090205460ff165b6104de5760405162461bcd60e51b8152602060048201526013602482015272696e636f7272656374207369676e617475726560681b6044820152606401610197565b9150806104ea816108d3565b9150506103a2565b5060018054610500916108ec565b60018190555060008080885160208a018b8d8af19050806105635760405162461bcd60e51b815260206004820152601c60248201527f7472616e73616374696f6e20776173206e6f74206578656375746564000000006044820152606401610197565b505050505050505050505050565b6004818154811061058157600080fd5b6000918252602090912001546001600160a01b0316905081565b6020808252825182820181905260009190848201906040850190845b818110156105d3578351835292840192918401916001016105b7565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561061e5761061e6105df565b604052919050565b600067ffffffffffffffff821115610640576106406105df565b5060051b60200190565b600082601f83011261065b57600080fd5b8135602061067061066b83610626565b6105f5565b82815260059290921b8401810191818101908684111561068f57600080fd5b8286015b848110156106ba57803560ff811681146106ad5760008081fd5b8352918301918301610693565b509695505050505050565b600082601f8301126106d657600080fd5b813560206106e661066b83610626565b82815260059290921b8401810191818101908684111561070557600080fd5b8286015b848110156106ba5780358352918301918301610709565b80356001600160a01b038116811461073757600080fd5b919050565b600082601f83011261074d57600080fd5b813567ffffffffffffffff811115610767576107676105df565b61077a601f8201601f19166020016105f5565b81815284602083860101111561078f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600080600080610100898b0312156107c957600080fd5b883567ffffffffffffffff808211156107e157600080fd5b6107ed8c838d0161064a565b995060208b013591508082111561080357600080fd5b61080f8c838d016106c5565b985060408b013591508082111561082557600080fd5b6108318c838d016106c5565b975061083f60608c01610720565b965060808b0135955060a08b013591508082111561085c57600080fd5b506108698b828c0161073c565b93505061087860c08a01610720565b915060e089013590509295985092959890939650565b6000602082840312156108a057600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016108e5576108e56108bd565b5060010190565b808201808211156108ff576108ff6108bd565b9291505056fea26469706673582212200a96a7ebe4bfa2e0a4201f9b5c1b908de448944f853c9f357f1d06955476889364736f6c63430008140033";

type MultiSigWalletConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSigWalletConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSigWallet__factory extends ContractFactory {
  constructor(...args: MultiSigWalletConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    owners_: AddressLike[],
    threshold_: BigNumberish,
    chainId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      owners_,
      threshold_,
      chainId,
      overrides || {}
    );
  }
  override deploy(
    owners_: AddressLike[],
    threshold_: BigNumberish,
    chainId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      owners_,
      threshold_,
      chainId,
      overrides || {}
    ) as Promise<
      MultiSigWallet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MultiSigWallet__factory {
    return super.connect(runner) as MultiSigWallet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSigWalletInterface {
    return new Interface(_abi) as MultiSigWalletInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MultiSigWallet {
    return new Contract(address, _abi, runner) as unknown as MultiSigWallet;
  }
}
