/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Initializable,
  InitializableInterface,
} from "../../../contracts/utils/Initializable";

const _abi = [
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff19169055348015601957600080fd5b506083806100286000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063158ef93e14602d575b600080fd5b60005460399060ff1681565b604051901515815260200160405180910390f3fea2646970667358221220ae8d144c57c7c09208b679f6911770d0e9d0e017e7aed13a9cbd62ceb0c4e40e64736f6c63430008140033";

type InitializableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitializableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Initializable__factory extends ContractFactory {
  constructor(...args: InitializableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Initializable & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Initializable__factory {
    return super.connect(runner) as Initializable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitializableInterface {
    return new Interface(_abi) as InitializableInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Initializable {
    return new Contract(address, _abi, runner) as unknown as Initializable;
  }
}
