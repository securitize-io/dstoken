/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TokenDataStore,
  TokenDataStoreInterface,
} from "../../../contracts/data-stores/TokenDataStore";

const _abi = [
  {
    inputs: [],
    name: "cap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "supportedFeatures",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061021b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806306fdde031461005c578063313ce5671461007a578063355274ea146100995780637627f6c4146100b057806395d89b41146100ba575b600080fd5b6100646100c2565b604051610071919061015d565b60405180910390f35b600e546100879060ff1681565b60405160ff9091168152602001610071565b6100a2600b5481565b604051908152602001610071565b600f546100a29081565b610064610150565b600c80546100cf906101ab565b80601f01602080910402602001604051908101604052809291908181526020018280546100fb906101ab565b80156101485780601f1061011d57610100808354040283529160200191610148565b820191906000526020600020905b81548152906001019060200180831161012b57829003601f168201915b505050505081565b600d80546100cf906101ab565b600060208083528351808285015260005b8181101561018a5785810183015185820160400152820161016e565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c908216806101bf57607f821691505b6020821081036101df57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212209a3b9f5c9d9b854bf54f19b1ef04360cacbefd59222bbc24385201cb46f6b48d64736f6c63430008140033";

type TokenDataStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenDataStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenDataStore__factory extends ContractFactory {
  constructor(...args: TokenDataStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenDataStore & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenDataStore__factory {
    return super.connect(runner) as TokenDataStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenDataStoreInterface {
    return new Interface(_abi) as TokenDataStoreInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TokenDataStore {
    return new Contract(address, _abi, runner) as unknown as TokenDataStore;
  }
}
