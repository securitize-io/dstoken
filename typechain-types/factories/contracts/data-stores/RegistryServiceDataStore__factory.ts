/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RegistryServiceDataStore,
  RegistryServiceDataStoreInterface,
} from "../../../contracts/data-stores/RegistryServiceDataStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "attributes",
    outputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "proofHash",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102dc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b9540d3c14610030575b600080fd5b61004361003e36600461014d565b61005b565b6040516100529392919061020f565b60405180910390f35b8151602081840181018051600482529282019482019490942091909352909152600090815260409020805460018201546002830180549293919261009e9061026c565b80601f01602080910402602001604051908101604052809291908181526020018280546100ca9061026c565b80156101175780601f106100ec57610100808354040283529160200191610117565b820191906000526020600020905b8154815290600101906020018083116100fa57829003601f168201915b5050505050905083565b634e487b7160e01b600052604160045260246000fd5b803560ff8116811461014857600080fd5b919050565b6000806040838503121561016057600080fd5b823567ffffffffffffffff8082111561017857600080fd5b818501915085601f83011261018c57600080fd5b81358181111561019e5761019e610121565b604051601f8201601f19908116603f011681019083821181831017156101c6576101c6610121565b816040528281528860208487010111156101df57600080fd5b82602086016020830137600060208483010152809650505050505061020660208401610137565b90509250929050565b83815260006020848184015260606040840152835180606085015260005b818110156102495785810183015185820160800152820161022d565b506000608082860101526080601f19601f83011685010192505050949350505050565b600181811c9082168061028057607f821691505b6020821081036102a057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a5983420d1415af3f7dee227ee8a8cba86581870c46fa48d9ff1074115c6ff2764736f6c63430008140033";

type RegistryServiceDataStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryServiceDataStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RegistryServiceDataStore__factory extends ContractFactory {
  constructor(...args: RegistryServiceDataStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RegistryServiceDataStore & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RegistryServiceDataStore__factory {
    return super.connect(runner) as RegistryServiceDataStore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryServiceDataStoreInterface {
    return new Interface(_abi) as RegistryServiceDataStoreInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RegistryServiceDataStore {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RegistryServiceDataStore;
  }
}
