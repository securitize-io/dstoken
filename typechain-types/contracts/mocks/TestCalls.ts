/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TestCallsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "byteArray1"
      | "lastMsgDataLength"
      | "lastMsgValue"
      | "nonPayable"
      | "receive1bytes"
      | "receive1uint"
      | "receive2uints"
      | "uint1"
      | "uint2"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "byteArray1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMsgDataLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastMsgValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonPayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receive1bytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receive1uint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receive2uints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uint1", values?: undefined): string;
  encodeFunctionData(functionFragment: "uint2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "byteArray1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMsgDataLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMsgValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonPayable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receive1bytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receive1uint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receive2uints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uint1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uint2", data: BytesLike): Result;
}

export interface TestCalls extends BaseContract {
  connect(runner?: ContractRunner | null): TestCalls;
  waitForDeployment(): Promise<this>;

  interface: TestCallsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  byteArray1: TypedContractMethod<[], [string], "view">;

  lastMsgDataLength: TypedContractMethod<[], [bigint], "view">;

  lastMsgValue: TypedContractMethod<[], [bigint], "view">;

  nonPayable: TypedContractMethod<[], [void], "payable">;

  receive1bytes: TypedContractMethod<[c: BytesLike], [void], "payable">;

  receive1uint: TypedContractMethod<[a: BigNumberish], [void], "payable">;

  receive2uints: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [void],
    "payable"
  >;

  uint1: TypedContractMethod<[], [bigint], "view">;

  uint2: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "byteArray1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastMsgDataLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastMsgValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonPayable"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "receive1bytes"
  ): TypedContractMethod<[c: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "receive1uint"
  ): TypedContractMethod<[a: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "receive2uints"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "uint1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "uint2"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
