/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistryServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCREDITED"
      | "APPROVED"
      | "COMPLIANCE_CONFIGURATION_SERVICE"
      | "COMPLIANCE_SERVICE"
      | "DS_TOKEN"
      | "EXCHANGE"
      | "KYC_APPROVED"
      | "LOCK_MANAGER"
      | "NONE"
      | "OMNIBUS_TBE_CONTROLLER"
      | "PARTITIONS_MANAGER"
      | "PENDING"
      | "PROFESSIONAL"
      | "QUALIFIED"
      | "REGISTRY_SERVICE"
      | "REJECTED"
      | "ROLE_EXCHANGE"
      | "ROLE_ISSUER"
      | "ROLE_MASTER"
      | "ROLE_NONE"
      | "ROLE_TRANSFER_AGENT"
      | "SECURITIZE_SWAP"
      | "TOKEN_ISSUER"
      | "TOKEN_REALLOCATOR"
      | "TRANSACTION_RELAYER"
      | "TRUST_SERVICE"
      | "UNUSED_1"
      | "WALLET_MANAGER"
      | "WALLET_REGISTRAR"
      | "addOmnibusWallet"
      | "addWallet"
      | "addWalletByInvestor"
      | "attributes"
      | "contractOwner"
      | "getAttributeExpiry"
      | "getAttributeProofHash"
      | "getAttributeValue"
      | "getCollisionHash"
      | "getCountry"
      | "getDSService"
      | "getInvestor"
      | "getInvestorDetails"
      | "getInvestorDetailsFull"
      | "getInvestors"
      | "getOmnibusWalletController"
      | "getVersion"
      | "initialize"
      | "isAccreditedInvestor(address)"
      | "isAccreditedInvestor(string)"
      | "isInvestor"
      | "isOmnibusWallet"
      | "isOwner"
      | "isQualifiedInvestor(address)"
      | "isQualifiedInvestor(string)"
      | "isWallet"
      | "owner"
      | "registerInvestor"
      | "removeInvestor"
      | "removeOmnibusWallet"
      | "removeWallet"
      | "renounceOwnership"
      | "setAttribute"
      | "setCountry"
      | "setDSService"
      | "transferOwnership"
      | "updateInvestor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSRegistryServiceInvestorAdded"
      | "DSRegistryServiceInvestorAttributeChanged"
      | "DSRegistryServiceInvestorCountryChanged"
      | "DSRegistryServiceInvestorRemoved"
      | "DSRegistryServiceOmnibusWalletAdded"
      | "DSRegistryServiceOmnibusWalletRemoved"
      | "DSRegistryServiceWalletAdded"
      | "DSRegistryServiceWalletRemoved"
      | "DSServiceSet"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACCREDITED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "APPROVED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DS_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "EXCHANGE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "KYC_APPROVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTITIONS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PENDING", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PROFESSIONAL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QUALIFIED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REGISTRY_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "REJECTED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_EXCHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_TRANSFER_AGENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITIZE_SWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REALLOCATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNUSED_1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WALLET_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_REGISTRAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOmnibusWallet",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWallet",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addWalletByInvestor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attributes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeExpiry",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeProofHash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributeValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollisionHash",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getCountry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDSService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorDetailsFull",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestors",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOmnibusWalletController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccreditedInvestor(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccreditedInvestor(string)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isInvestor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isOmnibusWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isQualifiedInvestor(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQualifiedInvestor(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerInvestor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOmnibusWallet",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWallet",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAttribute",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountry",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDSService",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInvestor",
    values: [
      string,
      string,
      string,
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ACCREDITED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "APPROVED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EXCHANGE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "KYC_APPROVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTITIONS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PENDING", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PROFESSIONAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QUALIFIED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRY_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REJECTED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_EXCHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TRANSFER_AGENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITIZE_SWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REALLOCATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNUSED_1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_REGISTRAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOmnibusWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWalletByInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attributes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeProofHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollisionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCountry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorDetailsFull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOmnibusWalletController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccreditedInvestor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccreditedInvestor(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isInvestor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOmnibusWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isQualifiedInvestor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQualifiedInvestor(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOmnibusWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCountry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInvestor",
    data: BytesLike
  ): Result;
}

export namespace DSRegistryServiceInvestorAddedEvent {
  export type InputTuple = [investorId: string, sender: AddressLike];
  export type OutputTuple = [investorId: string, sender: string];
  export interface OutputObject {
    investorId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceInvestorAttributeChangedEvent {
  export type InputTuple = [
    investorId: string,
    attributeId: BigNumberish,
    value: BigNumberish,
    expiry: BigNumberish,
    proofHash: string,
    sender: AddressLike
  ];
  export type OutputTuple = [
    investorId: string,
    attributeId: bigint,
    value: bigint,
    expiry: bigint,
    proofHash: string,
    sender: string
  ];
  export interface OutputObject {
    investorId: string;
    attributeId: bigint;
    value: bigint;
    expiry: bigint;
    proofHash: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceInvestorCountryChangedEvent {
  export type InputTuple = [
    investorId: string,
    country: string,
    sender: AddressLike
  ];
  export type OutputTuple = [
    investorId: string,
    country: string,
    sender: string
  ];
  export interface OutputObject {
    investorId: string;
    country: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceInvestorRemovedEvent {
  export type InputTuple = [investorId: string, sender: AddressLike];
  export type OutputTuple = [investorId: string, sender: string];
  export interface OutputObject {
    investorId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceOmnibusWalletAddedEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    investorId: string,
    omnibusWalletController: AddressLike
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    investorId: string,
    omnibusWalletController: string
  ];
  export interface OutputObject {
    omnibusWallet: string;
    investorId: string;
    omnibusWalletController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceOmnibusWalletRemovedEvent {
  export type InputTuple = [omnibusWallet: AddressLike, investorId: string];
  export type OutputTuple = [omnibusWallet: string, investorId: string];
  export interface OutputObject {
    omnibusWallet: string;
    investorId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceWalletAddedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    investorId: string,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    investorId: string,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    investorId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSRegistryServiceWalletRemovedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    investorId: string,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    investorId: string,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    investorId: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSServiceSetEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    serviceAddress: AddressLike
  ];
  export type OutputTuple = [serviceId: bigint, serviceAddress: string];
  export interface OutputObject {
    serviceId: bigint;
    serviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegistryService extends BaseContract {
  connect(runner?: ContractRunner | null): RegistryService;
  waitForDeployment(): Promise<this>;

  interface: RegistryServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCREDITED: TypedContractMethod<[], [bigint], "view">;

  APPROVED: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_CONFIGURATION_SERVICE: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN: TypedContractMethod<[], [bigint], "view">;

  EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  KYC_APPROVED: TypedContractMethod<[], [bigint], "view">;

  LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  NONE: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER: TypedContractMethod<[], [bigint], "view">;

  PARTITIONS_MANAGER: TypedContractMethod<[], [bigint], "view">;

  PENDING: TypedContractMethod<[], [bigint], "view">;

  PROFESSIONAL: TypedContractMethod<[], [bigint], "view">;

  QUALIFIED: TypedContractMethod<[], [bigint], "view">;

  REGISTRY_SERVICE: TypedContractMethod<[], [bigint], "view">;

  REJECTED: TypedContractMethod<[], [bigint], "view">;

  ROLE_EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ROLE_ISSUER: TypedContractMethod<[], [bigint], "view">;

  ROLE_MASTER: TypedContractMethod<[], [bigint], "view">;

  ROLE_NONE: TypedContractMethod<[], [bigint], "view">;

  ROLE_TRANSFER_AGENT: TypedContractMethod<[], [bigint], "view">;

  SECURITIZE_SWAP: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ISSUER: TypedContractMethod<[], [bigint], "view">;

  TOKEN_REALLOCATOR: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_RELAYER: TypedContractMethod<[], [bigint], "view">;

  TRUST_SERVICE: TypedContractMethod<[], [bigint], "view">;

  UNUSED_1: TypedContractMethod<[], [bigint], "view">;

  WALLET_MANAGER: TypedContractMethod<[], [bigint], "view">;

  WALLET_REGISTRAR: TypedContractMethod<[], [bigint], "view">;

  addOmnibusWallet: TypedContractMethod<
    [
      _id: string,
      _omnibusWallet: AddressLike,
      _omnibusWalletController: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  addWallet: TypedContractMethod<
    [_address: AddressLike, _id: string],
    [boolean],
    "nonpayable"
  >;

  addWalletByInvestor: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  attributes: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, bigint, string] & {
        value: bigint;
        expiry: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;

  contractOwner: TypedContractMethod<[], [string], "view">;

  getAttributeExpiry: TypedContractMethod<
    [_id: string, _attributeId: BigNumberish],
    [bigint],
    "view"
  >;

  getAttributeProofHash: TypedContractMethod<
    [_id: string, _attributeId: BigNumberish],
    [string],
    "view"
  >;

  getAttributeValue: TypedContractMethod<
    [_id: string, _attributeId: BigNumberish],
    [bigint],
    "view"
  >;

  getCollisionHash: TypedContractMethod<[_id: string], [string], "view">;

  getCountry: TypedContractMethod<[_id: string], [string], "view">;

  getDSService: TypedContractMethod<
    [_serviceId: BigNumberish],
    [string],
    "view"
  >;

  getInvestor: TypedContractMethod<[_address: AddressLike], [string], "view">;

  getInvestorDetails: TypedContractMethod<
    [_address: AddressLike],
    [[string, string]],
    "view"
  >;

  getInvestorDetailsFull: TypedContractMethod<
    [_id: string],
    [[string, bigint[], bigint[], string, string, string, string]],
    "view"
  >;

  getInvestors: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [[string, string]],
    "view"
  >;

  getOmnibusWalletController: TypedContractMethod<
    [_omnibusWallet: AddressLike],
    [string],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  "isAccreditedInvestor(address)": TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  "isAccreditedInvestor(string)": TypedContractMethod<
    [_id: string],
    [boolean],
    "view"
  >;

  isInvestor: TypedContractMethod<[_id: string], [boolean], "view">;

  isOmnibusWallet: TypedContractMethod<
    [_omnibusWallet: AddressLike],
    [boolean],
    "view"
  >;

  isOwner: TypedContractMethod<[], [boolean], "view">;

  "isQualifiedInvestor(address)": TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  "isQualifiedInvestor(string)": TypedContractMethod<
    [_id: string],
    [boolean],
    "view"
  >;

  isWallet: TypedContractMethod<[_address: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerInvestor: TypedContractMethod<
    [_id: string, _collisionHash: string],
    [boolean],
    "nonpayable"
  >;

  removeInvestor: TypedContractMethod<[_id: string], [boolean], "nonpayable">;

  removeOmnibusWallet: TypedContractMethod<
    [_id: string, _omnibusWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWallet: TypedContractMethod<
    [_address: AddressLike, _id: string],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAttribute: TypedContractMethod<
    [
      _id: string,
      _attributeId: BigNumberish,
      _value: BigNumberish,
      _expiry: BigNumberish,
      _proofHash: string
    ],
    [boolean],
    "nonpayable"
  >;

  setCountry: TypedContractMethod<
    [_id: string, _country: string],
    [boolean],
    "nonpayable"
  >;

  setDSService: TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateInvestor: TypedContractMethod<
    [
      _id: string,
      _collisionHash: string,
      _country: string,
      _wallets: AddressLike[],
      _attributeIds: BigNumberish[],
      _attributeValues: BigNumberish[],
      _attributeExpirations: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCREDITED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "APPROVED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_CONFIGURATION_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "KYC_APPROVED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PARTITIONS_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENDING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROFESSIONAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUALIFIED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRY_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REJECTED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_MASTER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_TRANSFER_AGENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITIZE_SWAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_REALLOCATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_RELAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUST_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNUSED_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_REGISTRAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addOmnibusWallet"
  ): TypedContractMethod<
    [
      _id: string,
      _omnibusWallet: AddressLike,
      _omnibusWalletController: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWallet"
  ): TypedContractMethod<
    [_address: AddressLike, _id: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addWalletByInvestor"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "attributes"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, bigint, string] & {
        value: bigint;
        expiry: bigint;
        proofHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAttributeExpiry"
  ): TypedContractMethod<
    [_id: string, _attributeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttributeProofHash"
  ): TypedContractMethod<
    [_id: string, _attributeId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttributeValue"
  ): TypedContractMethod<
    [_id: string, _attributeId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCollisionHash"
  ): TypedContractMethod<[_id: string], [string], "view">;
  getFunction(
    nameOrSignature: "getCountry"
  ): TypedContractMethod<[_id: string], [string], "view">;
  getFunction(
    nameOrSignature: "getDSService"
  ): TypedContractMethod<[_serviceId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getInvestor"
  ): TypedContractMethod<[_address: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getInvestorDetails"
  ): TypedContractMethod<[_address: AddressLike], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getInvestorDetailsFull"
  ): TypedContractMethod<
    [_id: string],
    [[string, bigint[], bigint[], string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInvestors"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOmnibusWalletController"
  ): TypedContractMethod<[_omnibusWallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAccreditedInvestor(address)"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAccreditedInvestor(string)"
  ): TypedContractMethod<[_id: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isInvestor"
  ): TypedContractMethod<[_id: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOmnibusWallet"
  ): TypedContractMethod<[_omnibusWallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isQualifiedInvestor(address)"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isQualifiedInvestor(string)"
  ): TypedContractMethod<[_id: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWallet"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerInvestor"
  ): TypedContractMethod<
    [_id: string, _collisionHash: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeInvestor"
  ): TypedContractMethod<[_id: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOmnibusWallet"
  ): TypedContractMethod<
    [_id: string, _omnibusWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeWallet"
  ): TypedContractMethod<
    [_address: AddressLike, _id: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAttribute"
  ): TypedContractMethod<
    [
      _id: string,
      _attributeId: BigNumberish,
      _value: BigNumberish,
      _expiry: BigNumberish,
      _proofHash: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCountry"
  ): TypedContractMethod<
    [_id: string, _country: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDSService"
  ): TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInvestor"
  ): TypedContractMethod<
    [
      _id: string,
      _collisionHash: string,
      _country: string,
      _wallets: AddressLike[],
      _attributeIds: BigNumberish[],
      _attributeValues: BigNumberish[],
      _attributeExpirations: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "DSRegistryServiceInvestorAdded"
  ): TypedContractEvent<
    DSRegistryServiceInvestorAddedEvent.InputTuple,
    DSRegistryServiceInvestorAddedEvent.OutputTuple,
    DSRegistryServiceInvestorAddedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceInvestorAttributeChanged"
  ): TypedContractEvent<
    DSRegistryServiceInvestorAttributeChangedEvent.InputTuple,
    DSRegistryServiceInvestorAttributeChangedEvent.OutputTuple,
    DSRegistryServiceInvestorAttributeChangedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceInvestorCountryChanged"
  ): TypedContractEvent<
    DSRegistryServiceInvestorCountryChangedEvent.InputTuple,
    DSRegistryServiceInvestorCountryChangedEvent.OutputTuple,
    DSRegistryServiceInvestorCountryChangedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceInvestorRemoved"
  ): TypedContractEvent<
    DSRegistryServiceInvestorRemovedEvent.InputTuple,
    DSRegistryServiceInvestorRemovedEvent.OutputTuple,
    DSRegistryServiceInvestorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceOmnibusWalletAdded"
  ): TypedContractEvent<
    DSRegistryServiceOmnibusWalletAddedEvent.InputTuple,
    DSRegistryServiceOmnibusWalletAddedEvent.OutputTuple,
    DSRegistryServiceOmnibusWalletAddedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceOmnibusWalletRemoved"
  ): TypedContractEvent<
    DSRegistryServiceOmnibusWalletRemovedEvent.InputTuple,
    DSRegistryServiceOmnibusWalletRemovedEvent.OutputTuple,
    DSRegistryServiceOmnibusWalletRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceWalletAdded"
  ): TypedContractEvent<
    DSRegistryServiceWalletAddedEvent.InputTuple,
    DSRegistryServiceWalletAddedEvent.OutputTuple,
    DSRegistryServiceWalletAddedEvent.OutputObject
  >;
  getEvent(
    key: "DSRegistryServiceWalletRemoved"
  ): TypedContractEvent<
    DSRegistryServiceWalletRemovedEvent.InputTuple,
    DSRegistryServiceWalletRemovedEvent.OutputTuple,
    DSRegistryServiceWalletRemovedEvent.OutputObject
  >;
  getEvent(
    key: "DSServiceSet"
  ): TypedContractEvent<
    DSServiceSetEvent.InputTuple,
    DSServiceSetEvent.OutputTuple,
    DSServiceSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DSRegistryServiceInvestorAdded(string,address)": TypedContractEvent<
      DSRegistryServiceInvestorAddedEvent.InputTuple,
      DSRegistryServiceInvestorAddedEvent.OutputTuple,
      DSRegistryServiceInvestorAddedEvent.OutputObject
    >;
    DSRegistryServiceInvestorAdded: TypedContractEvent<
      DSRegistryServiceInvestorAddedEvent.InputTuple,
      DSRegistryServiceInvestorAddedEvent.OutputTuple,
      DSRegistryServiceInvestorAddedEvent.OutputObject
    >;

    "DSRegistryServiceInvestorAttributeChanged(string,uint256,uint256,uint256,string,address)": TypedContractEvent<
      DSRegistryServiceInvestorAttributeChangedEvent.InputTuple,
      DSRegistryServiceInvestorAttributeChangedEvent.OutputTuple,
      DSRegistryServiceInvestorAttributeChangedEvent.OutputObject
    >;
    DSRegistryServiceInvestorAttributeChanged: TypedContractEvent<
      DSRegistryServiceInvestorAttributeChangedEvent.InputTuple,
      DSRegistryServiceInvestorAttributeChangedEvent.OutputTuple,
      DSRegistryServiceInvestorAttributeChangedEvent.OutputObject
    >;

    "DSRegistryServiceInvestorCountryChanged(string,string,address)": TypedContractEvent<
      DSRegistryServiceInvestorCountryChangedEvent.InputTuple,
      DSRegistryServiceInvestorCountryChangedEvent.OutputTuple,
      DSRegistryServiceInvestorCountryChangedEvent.OutputObject
    >;
    DSRegistryServiceInvestorCountryChanged: TypedContractEvent<
      DSRegistryServiceInvestorCountryChangedEvent.InputTuple,
      DSRegistryServiceInvestorCountryChangedEvent.OutputTuple,
      DSRegistryServiceInvestorCountryChangedEvent.OutputObject
    >;

    "DSRegistryServiceInvestorRemoved(string,address)": TypedContractEvent<
      DSRegistryServiceInvestorRemovedEvent.InputTuple,
      DSRegistryServiceInvestorRemovedEvent.OutputTuple,
      DSRegistryServiceInvestorRemovedEvent.OutputObject
    >;
    DSRegistryServiceInvestorRemoved: TypedContractEvent<
      DSRegistryServiceInvestorRemovedEvent.InputTuple,
      DSRegistryServiceInvestorRemovedEvent.OutputTuple,
      DSRegistryServiceInvestorRemovedEvent.OutputObject
    >;

    "DSRegistryServiceOmnibusWalletAdded(address,string,address)": TypedContractEvent<
      DSRegistryServiceOmnibusWalletAddedEvent.InputTuple,
      DSRegistryServiceOmnibusWalletAddedEvent.OutputTuple,
      DSRegistryServiceOmnibusWalletAddedEvent.OutputObject
    >;
    DSRegistryServiceOmnibusWalletAdded: TypedContractEvent<
      DSRegistryServiceOmnibusWalletAddedEvent.InputTuple,
      DSRegistryServiceOmnibusWalletAddedEvent.OutputTuple,
      DSRegistryServiceOmnibusWalletAddedEvent.OutputObject
    >;

    "DSRegistryServiceOmnibusWalletRemoved(address,string)": TypedContractEvent<
      DSRegistryServiceOmnibusWalletRemovedEvent.InputTuple,
      DSRegistryServiceOmnibusWalletRemovedEvent.OutputTuple,
      DSRegistryServiceOmnibusWalletRemovedEvent.OutputObject
    >;
    DSRegistryServiceOmnibusWalletRemoved: TypedContractEvent<
      DSRegistryServiceOmnibusWalletRemovedEvent.InputTuple,
      DSRegistryServiceOmnibusWalletRemovedEvent.OutputTuple,
      DSRegistryServiceOmnibusWalletRemovedEvent.OutputObject
    >;

    "DSRegistryServiceWalletAdded(address,string,address)": TypedContractEvent<
      DSRegistryServiceWalletAddedEvent.InputTuple,
      DSRegistryServiceWalletAddedEvent.OutputTuple,
      DSRegistryServiceWalletAddedEvent.OutputObject
    >;
    DSRegistryServiceWalletAdded: TypedContractEvent<
      DSRegistryServiceWalletAddedEvent.InputTuple,
      DSRegistryServiceWalletAddedEvent.OutputTuple,
      DSRegistryServiceWalletAddedEvent.OutputObject
    >;

    "DSRegistryServiceWalletRemoved(address,string,address)": TypedContractEvent<
      DSRegistryServiceWalletRemovedEvent.InputTuple,
      DSRegistryServiceWalletRemovedEvent.OutputTuple,
      DSRegistryServiceWalletRemovedEvent.OutputObject
    >;
    DSRegistryServiceWalletRemoved: TypedContractEvent<
      DSRegistryServiceWalletRemovedEvent.InputTuple,
      DSRegistryServiceWalletRemovedEvent.OutputTuple,
      DSRegistryServiceWalletRemovedEvent.OutputObject
    >;

    "DSServiceSet(uint256,address)": TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;
    DSServiceSet: TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
