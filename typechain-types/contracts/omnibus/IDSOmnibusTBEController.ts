/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSOmnibusTBEControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adjustCounters"
      | "bulkBurn"
      | "bulkIssuance"
      | "bulkTransfer"
      | "getOmnibusWallet"
      | "getVersion"
      | "initialize"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "adjustCounters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkBurn",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkIssuance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkTransfer",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOmnibusWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustCounters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOmnibusWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSOmnibusTBEController extends BaseContract {
  connect(runner?: ContractRunner | null): IDSOmnibusTBEController;
  waitForDeployment(): Promise<this>;

  interface: IDSOmnibusTBEControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adjustCounters: TypedContractMethod<
    [
      totalDelta: BigNumberish,
      accreditedDelta: BigNumberish,
      usAccreditedDelta: BigNumberish,
      usTotalDelta: BigNumberish,
      jpTotalDelta: BigNumberish,
      euRetailCountries: BytesLike[],
      euRetailCountryDeltas: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  bulkBurn: TypedContractMethod<
    [
      value: BigNumberish,
      totalInvestors: BigNumberish,
      accreditedInvestors: BigNumberish,
      usAccreditedInvestors: BigNumberish,
      usTotalInvestors: BigNumberish,
      jpTotalInvestors: BigNumberish,
      euRetailCountries: BytesLike[],
      euRetailCountryCounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  bulkIssuance: TypedContractMethod<
    [
      value: BigNumberish,
      issuanceTime: BigNumberish,
      totalInvestors: BigNumberish,
      accreditedInvestors: BigNumberish,
      usAccreditedInvestors: BigNumberish,
      usTotalInvestors: BigNumberish,
      jpTotalInvestors: BigNumberish,
      euRetailCountries: BytesLike[],
      euRetailCountryCounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  bulkTransfer: TypedContractMethod<
    [wallets: AddressLike[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getOmnibusWallet: TypedContractMethod<[], [string], "view">;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<
    [_omnibusWallet: AddressLike, _isPartitionedToken: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adjustCounters"
  ): TypedContractMethod<
    [
      totalDelta: BigNumberish,
      accreditedDelta: BigNumberish,
      usAccreditedDelta: BigNumberish,
      usTotalDelta: BigNumberish,
      jpTotalDelta: BigNumberish,
      euRetailCountries: BytesLike[],
      euRetailCountryDeltas: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkBurn"
  ): TypedContractMethod<
    [
      value: BigNumberish,
      totalInvestors: BigNumberish,
      accreditedInvestors: BigNumberish,
      usAccreditedInvestors: BigNumberish,
      usTotalInvestors: BigNumberish,
      jpTotalInvestors: BigNumberish,
      euRetailCountries: BytesLike[],
      euRetailCountryCounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkIssuance"
  ): TypedContractMethod<
    [
      value: BigNumberish,
      issuanceTime: BigNumberish,
      totalInvestors: BigNumberish,
      accreditedInvestors: BigNumberish,
      usAccreditedInvestors: BigNumberish,
      usTotalInvestors: BigNumberish,
      jpTotalInvestors: BigNumberish,
      euRetailCountries: BytesLike[],
      euRetailCountryCounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkTransfer"
  ): TypedContractMethod<
    [wallets: AddressLike[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOmnibusWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_omnibusWallet: AddressLike, _isPartitionedToken: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
