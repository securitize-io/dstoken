/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfInvestor"
      | "burn"
      | "emitOmnibusTBEEvent"
      | "emitOmnibusTBETransferEvent"
      | "emitOmnibusTransferEvent"
      | "getWalletAt"
      | "initialize"
      | "isPaused"
      | "issueTokens"
      | "issueTokensCustom"
      | "issueTokensWithMultipleLocks"
      | "issueTokensWithNoCompliance"
      | "omnibusBurn"
      | "omnibusSeize"
      | "preTransferCheck"
      | "seize"
      | "setCap"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateOmnibusInvestorBalance"
      | "walletCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "Initialized"
      | "Issue"
      | "OmnibusBurn"
      | "OmnibusDeposit"
      | "OmnibusSeize"
      | "OmnibusTBEOperation"
      | "OmnibusTBETransfer"
      | "OmnibusTransfer"
      | "OmnibusWithdraw"
      | "Seize"
      | "Transfer"
      | "WalletAdded"
      | "WalletRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOmnibusTBEEvent",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOmnibusTBETransferEvent",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOmnibusTransferEvent",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issueTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokensCustom",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokensWithMultipleLocks",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      string,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokensWithNoCompliance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "omnibusBurn",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "omnibusSeize",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "preTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOmnibusInvestorBalance",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitOmnibusTBEEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitOmnibusTBETransferEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitOmnibusTransferEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokensCustom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokensWithMultipleLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueTokensWithNoCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "omnibusBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "omnibusSeize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOmnibusInvestorBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletCount",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    burner: AddressLike,
    value: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [burner: string, value: bigint, reason: string];
  export interface OutputObject {
    burner: string;
    value: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssueEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    valueLocked: BigNumberish
  ];
  export type OutputTuple = [to: string, value: bigint, valueLocked: bigint];
  export interface OutputObject {
    to: string;
    value: bigint;
    valueLocked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusBurnEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    who: AddressLike,
    value: BigNumberish,
    reason: string,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    who: string,
    value: bigint,
    reason: string,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    who: string;
    value: bigint;
    reason: string;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusDepositEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    to: string,
    value: bigint,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    to: string;
    value: bigint;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusSeizeEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    from: AddressLike,
    value: BigNumberish,
    reason: string,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    from: string,
    value: bigint,
    reason: string,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    from: string;
    value: bigint;
    reason: string;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusTBEOperationEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    totalDelta: BigNumberish,
    accreditedDelta: BigNumberish,
    usAccreditedDelta: BigNumberish,
    usTotalDelta: BigNumberish,
    jpTotalDelta: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    totalDelta: bigint,
    accreditedDelta: bigint,
    usAccreditedDelta: bigint,
    usTotalDelta: bigint,
    jpTotalDelta: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    totalDelta: bigint;
    accreditedDelta: bigint;
    usAccreditedDelta: bigint;
    usTotalDelta: bigint;
    jpTotalDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusTBETransferEvent {
  export type InputTuple = [omnibusWallet: AddressLike, externalId: string];
  export type OutputTuple = [omnibusWallet: string, externalId: string];
  export interface OutputObject {
    omnibusWallet: string;
    externalId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusTransferEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    from: string,
    to: string,
    value: bigint,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    from: string;
    to: string;
    value: bigint;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusWithdrawEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    from: AddressLike,
    value: BigNumberish,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    from: string,
    value: bigint,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    from: string;
    value: bigint;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeizeEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    reason: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletAddedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletRemovedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSToken extends BaseContract {
  connect(runner?: ContractRunner | null): IDSToken;
  waitForDeployment(): Promise<this>;

  interface: IDSTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfInvestor: TypedContractMethod<[_id: string], [bigint], "view">;

  burn: TypedContractMethod<
    [_who: AddressLike, _value: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  emitOmnibusTBEEvent: TypedContractMethod<
    [
      omnibusWallet: AddressLike,
      totalDelta: BigNumberish,
      accreditedDelta: BigNumberish,
      usAccreditedDelta: BigNumberish,
      usTotalDelta: BigNumberish,
      jpTotalDelta: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emitOmnibusTBETransferEvent: TypedContractMethod<
    [omnibusWallet: AddressLike, externalId: string],
    [void],
    "nonpayable"
  >;

  emitOmnibusTransferEvent: TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getWalletAt: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  issueTokens: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  issueTokensCustom: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _issuanceTime: BigNumberish,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  issueTokensWithMultipleLocks: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _issuanceTime: BigNumberish,
      _valuesLocked: BigNumberish[],
      _reason: string,
      _releaseTimes: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  issueTokensWithNoCompliance: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  omnibusBurn: TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _who: AddressLike,
      _value: BigNumberish,
      _reason: string
    ],
    [void],
    "nonpayable"
  >;

  omnibusSeize: TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _reason: string
    ],
    [void],
    "nonpayable"
  >;

  preTransferCheck: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  seize: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _reason: string
    ],
    [void],
    "nonpayable"
  >;

  setCap: TypedContractMethod<[_cap: BigNumberish], [void], "nonpayable">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateOmnibusInvestorBalance: TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _wallet: AddressLike,
      _value: BigNumberish,
      _increase: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  walletCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfInvestor"
  ): TypedContractMethod<[_id: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_who: AddressLike, _value: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitOmnibusTBEEvent"
  ): TypedContractMethod<
    [
      omnibusWallet: AddressLike,
      totalDelta: BigNumberish,
      accreditedDelta: BigNumberish,
      usAccreditedDelta: BigNumberish,
      usTotalDelta: BigNumberish,
      jpTotalDelta: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitOmnibusTBETransferEvent"
  ): TypedContractMethod<
    [omnibusWallet: AddressLike, externalId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitOmnibusTransferEvent"
  ): TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getWalletAt"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "issueTokens"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueTokensCustom"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _issuanceTime: BigNumberish,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueTokensWithMultipleLocks"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _issuanceTime: BigNumberish,
      _valuesLocked: BigNumberish[],
      _reason: string,
      _releaseTimes: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueTokensWithNoCompliance"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "omnibusBurn"
  ): TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _who: AddressLike,
      _value: BigNumberish,
      _reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "omnibusSeize"
  ): TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preTransferCheck"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCap"
  ): TypedContractMethod<[_cap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOmnibusInvestorBalance"
  ): TypedContractMethod<
    [
      _omnibusWallet: AddressLike,
      _wallet: AddressLike,
      _value: BigNumberish,
      _increase: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "walletCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Issue"
  ): TypedContractEvent<
    IssueEvent.InputTuple,
    IssueEvent.OutputTuple,
    IssueEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusBurn"
  ): TypedContractEvent<
    OmnibusBurnEvent.InputTuple,
    OmnibusBurnEvent.OutputTuple,
    OmnibusBurnEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusDeposit"
  ): TypedContractEvent<
    OmnibusDepositEvent.InputTuple,
    OmnibusDepositEvent.OutputTuple,
    OmnibusDepositEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusSeize"
  ): TypedContractEvent<
    OmnibusSeizeEvent.InputTuple,
    OmnibusSeizeEvent.OutputTuple,
    OmnibusSeizeEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusTBEOperation"
  ): TypedContractEvent<
    OmnibusTBEOperationEvent.InputTuple,
    OmnibusTBEOperationEvent.OutputTuple,
    OmnibusTBEOperationEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusTBETransfer"
  ): TypedContractEvent<
    OmnibusTBETransferEvent.InputTuple,
    OmnibusTBETransferEvent.OutputTuple,
    OmnibusTBETransferEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusTransfer"
  ): TypedContractEvent<
    OmnibusTransferEvent.InputTuple,
    OmnibusTransferEvent.OutputTuple,
    OmnibusTransferEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusWithdraw"
  ): TypedContractEvent<
    OmnibusWithdrawEvent.InputTuple,
    OmnibusWithdrawEvent.OutputTuple,
    OmnibusWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Seize"
  ): TypedContractEvent<
    SeizeEvent.InputTuple,
    SeizeEvent.OutputTuple,
    SeizeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WalletAdded"
  ): TypedContractEvent<
    WalletAddedEvent.InputTuple,
    WalletAddedEvent.OutputTuple,
    WalletAddedEvent.OutputObject
  >;
  getEvent(
    key: "WalletRemoved"
  ): TypedContractEvent<
    WalletRemovedEvent.InputTuple,
    WalletRemovedEvent.OutputTuple,
    WalletRemovedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,uint256,string)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Issue(address,uint256,uint256)": TypedContractEvent<
      IssueEvent.InputTuple,
      IssueEvent.OutputTuple,
      IssueEvent.OutputObject
    >;
    Issue: TypedContractEvent<
      IssueEvent.InputTuple,
      IssueEvent.OutputTuple,
      IssueEvent.OutputObject
    >;

    "OmnibusBurn(address,address,uint256,string,uint8)": TypedContractEvent<
      OmnibusBurnEvent.InputTuple,
      OmnibusBurnEvent.OutputTuple,
      OmnibusBurnEvent.OutputObject
    >;
    OmnibusBurn: TypedContractEvent<
      OmnibusBurnEvent.InputTuple,
      OmnibusBurnEvent.OutputTuple,
      OmnibusBurnEvent.OutputObject
    >;

    "OmnibusDeposit(address,address,uint256,uint8)": TypedContractEvent<
      OmnibusDepositEvent.InputTuple,
      OmnibusDepositEvent.OutputTuple,
      OmnibusDepositEvent.OutputObject
    >;
    OmnibusDeposit: TypedContractEvent<
      OmnibusDepositEvent.InputTuple,
      OmnibusDepositEvent.OutputTuple,
      OmnibusDepositEvent.OutputObject
    >;

    "OmnibusSeize(address,address,uint256,string,uint8)": TypedContractEvent<
      OmnibusSeizeEvent.InputTuple,
      OmnibusSeizeEvent.OutputTuple,
      OmnibusSeizeEvent.OutputObject
    >;
    OmnibusSeize: TypedContractEvent<
      OmnibusSeizeEvent.InputTuple,
      OmnibusSeizeEvent.OutputTuple,
      OmnibusSeizeEvent.OutputObject
    >;

    "OmnibusTBEOperation(address,int256,int256,int256,int256,int256)": TypedContractEvent<
      OmnibusTBEOperationEvent.InputTuple,
      OmnibusTBEOperationEvent.OutputTuple,
      OmnibusTBEOperationEvent.OutputObject
    >;
    OmnibusTBEOperation: TypedContractEvent<
      OmnibusTBEOperationEvent.InputTuple,
      OmnibusTBEOperationEvent.OutputTuple,
      OmnibusTBEOperationEvent.OutputObject
    >;

    "OmnibusTBETransfer(address,string)": TypedContractEvent<
      OmnibusTBETransferEvent.InputTuple,
      OmnibusTBETransferEvent.OutputTuple,
      OmnibusTBETransferEvent.OutputObject
    >;
    OmnibusTBETransfer: TypedContractEvent<
      OmnibusTBETransferEvent.InputTuple,
      OmnibusTBETransferEvent.OutputTuple,
      OmnibusTBETransferEvent.OutputObject
    >;

    "OmnibusTransfer(address,address,address,uint256,uint8)": TypedContractEvent<
      OmnibusTransferEvent.InputTuple,
      OmnibusTransferEvent.OutputTuple,
      OmnibusTransferEvent.OutputObject
    >;
    OmnibusTransfer: TypedContractEvent<
      OmnibusTransferEvent.InputTuple,
      OmnibusTransferEvent.OutputTuple,
      OmnibusTransferEvent.OutputObject
    >;

    "OmnibusWithdraw(address,address,uint256,uint8)": TypedContractEvent<
      OmnibusWithdrawEvent.InputTuple,
      OmnibusWithdrawEvent.OutputTuple,
      OmnibusWithdrawEvent.OutputObject
    >;
    OmnibusWithdraw: TypedContractEvent<
      OmnibusWithdrawEvent.InputTuple,
      OmnibusWithdrawEvent.OutputTuple,
      OmnibusWithdrawEvent.OutputObject
    >;

    "Seize(address,address,uint256,string)": TypedContractEvent<
      SeizeEvent.InputTuple,
      SeizeEvent.OutputTuple,
      SeizeEvent.OutputObject
    >;
    Seize: TypedContractEvent<
      SeizeEvent.InputTuple,
      SeizeEvent.OutputTuple,
      SeizeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WalletAdded(address)": TypedContractEvent<
      WalletAddedEvent.InputTuple,
      WalletAddedEvent.OutputTuple,
      WalletAddedEvent.OutputObject
    >;
    WalletAdded: TypedContractEvent<
      WalletAddedEvent.InputTuple,
      WalletAddedEvent.OutputTuple,
      WalletAddedEvent.OutputObject
    >;

    "WalletRemoved(address)": TypedContractEvent<
      WalletRemovedEvent.InputTuple,
      WalletRemovedEvent.OutputTuple,
      WalletRemovedEvent.OutputObject
    >;
    WalletRemoved: TypedContractEvent<
      WalletRemovedEvent.InputTuple,
      WalletRemovedEvent.OutputTuple,
      WalletRemovedEvent.OutputObject
    >;
  };
}
