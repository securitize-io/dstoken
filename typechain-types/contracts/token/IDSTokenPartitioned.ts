/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSTokenPartitionedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOfByPartition"
      | "balanceOfInvestorByPartition"
      | "burnByPartition"
      | "partitionCountOf"
      | "partitionOf"
      | "seizeByPartition"
      | "transferByPartitions"
      | "transferFromByPartitions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BurnByPartition"
      | "IssueByPartition"
      | "SeizeByPartition"
      | "TransferByPartition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOfByPartition",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfInvestorByPartition",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnByPartition",
    values: [AddressLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionCountOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeByPartition",
    values: [AddressLike, AddressLike, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferByPartitions",
    values: [AddressLike, BigNumberish, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromByPartitions",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceOfByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfInvestorByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferByPartitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromByPartitions",
    data: BytesLike
  ): Result;
}

export namespace BurnByPartitionEvent {
  export type InputTuple = [
    burner: AddressLike,
    value: BigNumberish,
    reason: string,
    partition: BytesLike
  ];
  export type OutputTuple = [
    burner: string,
    value: bigint,
    reason: string,
    partition: string
  ];
  export interface OutputObject {
    burner: string;
    value: bigint;
    reason: string;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssueByPartitionEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    partition: BytesLike
  ];
  export type OutputTuple = [to: string, value: bigint, partition: string];
  export interface OutputObject {
    to: string;
    value: bigint;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SeizeByPartitionEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    reason: string,
    partition: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    reason: string,
    partition: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    reason: string;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferByPartitionEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    partition: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    value: bigint,
    partition: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSTokenPartitioned extends BaseContract {
  connect(runner?: ContractRunner | null): IDSTokenPartitioned;
  waitForDeployment(): Promise<this>;

  interface: IDSTokenPartitionedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOfByPartition: TypedContractMethod<
    [_who: AddressLike, _partition: BytesLike],
    [bigint],
    "view"
  >;

  balanceOfInvestorByPartition: TypedContractMethod<
    [_id: string, _partition: BytesLike],
    [bigint],
    "view"
  >;

  burnByPartition: TypedContractMethod<
    [
      _who: AddressLike,
      _value: BigNumberish,
      _reason: string,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  partitionCountOf: TypedContractMethod<[_who: AddressLike], [bigint], "view">;

  partitionOf: TypedContractMethod<
    [_who: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;

  seizeByPartition: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _reason: string,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferByPartitions: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _partitions: BytesLike[],
      _values: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  transferFromByPartitions: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _partitions: BytesLike[],
      _values: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOfByPartition"
  ): TypedContractMethod<
    [_who: AddressLike, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfInvestorByPartition"
  ): TypedContractMethod<
    [_id: string, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "burnByPartition"
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _value: BigNumberish,
      _reason: string,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "partitionCountOf"
  ): TypedContractMethod<[_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "partitionOf"
  ): TypedContractMethod<
    [_who: AddressLike, _index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "seizeByPartition"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _reason: string,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferByPartitions"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _partitions: BytesLike[],
      _values: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFromByPartitions"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _partitions: BytesLike[],
      _values: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "BurnByPartition"
  ): TypedContractEvent<
    BurnByPartitionEvent.InputTuple,
    BurnByPartitionEvent.OutputTuple,
    BurnByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "IssueByPartition"
  ): TypedContractEvent<
    IssueByPartitionEvent.InputTuple,
    IssueByPartitionEvent.OutputTuple,
    IssueByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "SeizeByPartition"
  ): TypedContractEvent<
    SeizeByPartitionEvent.InputTuple,
    SeizeByPartitionEvent.OutputTuple,
    SeizeByPartitionEvent.OutputObject
  >;
  getEvent(
    key: "TransferByPartition"
  ): TypedContractEvent<
    TransferByPartitionEvent.InputTuple,
    TransferByPartitionEvent.OutputTuple,
    TransferByPartitionEvent.OutputObject
  >;

  filters: {
    "BurnByPartition(address,uint256,string,bytes32)": TypedContractEvent<
      BurnByPartitionEvent.InputTuple,
      BurnByPartitionEvent.OutputTuple,
      BurnByPartitionEvent.OutputObject
    >;
    BurnByPartition: TypedContractEvent<
      BurnByPartitionEvent.InputTuple,
      BurnByPartitionEvent.OutputTuple,
      BurnByPartitionEvent.OutputObject
    >;

    "IssueByPartition(address,uint256,bytes32)": TypedContractEvent<
      IssueByPartitionEvent.InputTuple,
      IssueByPartitionEvent.OutputTuple,
      IssueByPartitionEvent.OutputObject
    >;
    IssueByPartition: TypedContractEvent<
      IssueByPartitionEvent.InputTuple,
      IssueByPartitionEvent.OutputTuple,
      IssueByPartitionEvent.OutputObject
    >;

    "SeizeByPartition(address,address,uint256,string,bytes32)": TypedContractEvent<
      SeizeByPartitionEvent.InputTuple,
      SeizeByPartitionEvent.OutputTuple,
      SeizeByPartitionEvent.OutputObject
    >;
    SeizeByPartition: TypedContractEvent<
      SeizeByPartitionEvent.InputTuple,
      SeizeByPartitionEvent.OutputTuple,
      SeizeByPartitionEvent.OutputObject
    >;

    "TransferByPartition(address,address,uint256,bytes32)": TypedContractEvent<
      TransferByPartitionEvent.InputTuple,
      TransferByPartitionEvent.OutputTuple,
      TransferByPartitionEvent.OutputObject
    >;
    TransferByPartition: TypedContractEvent<
      TransferByPartitionEvent.InputTuple,
      TransferByPartitionEvent.OutputTuple,
      TransferByPartitionEvent.OutputObject
    >;
  };
}
