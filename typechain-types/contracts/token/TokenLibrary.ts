/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface TokenLibraryInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "Issue" | "OmnibusDeposit" | "OmnibusWithdraw"
  ): EventFragment;
}

export namespace IssueEvent {
  export type InputTuple = [
    to: AddressLike,
    value: BigNumberish,
    valueLocked: BigNumberish
  ];
  export type OutputTuple = [to: string, value: bigint, valueLocked: bigint];
  export interface OutputObject {
    to: string;
    value: bigint;
    valueLocked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusDepositEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    to: AddressLike,
    value: BigNumberish,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    to: string,
    value: bigint,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    to: string;
    value: bigint;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OmnibusWithdrawEvent {
  export type InputTuple = [
    omnibusWallet: AddressLike,
    from: AddressLike,
    value: BigNumberish,
    assetTrackingMode: BigNumberish
  ];
  export type OutputTuple = [
    omnibusWallet: string,
    from: string,
    value: bigint,
    assetTrackingMode: bigint
  ];
  export interface OutputObject {
    omnibusWallet: string;
    from: string;
    value: bigint;
    assetTrackingMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenLibrary extends BaseContract {
  connect(runner?: ContractRunner | null): TokenLibrary;
  waitForDeployment(): Promise<this>;

  interface: TokenLibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Issue"
  ): TypedContractEvent<
    IssueEvent.InputTuple,
    IssueEvent.OutputTuple,
    IssueEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusDeposit"
  ): TypedContractEvent<
    OmnibusDepositEvent.InputTuple,
    OmnibusDepositEvent.OutputTuple,
    OmnibusDepositEvent.OutputObject
  >;
  getEvent(
    key: "OmnibusWithdraw"
  ): TypedContractEvent<
    OmnibusWithdrawEvent.InputTuple,
    OmnibusWithdrawEvent.OutputTuple,
    OmnibusWithdrawEvent.OutputObject
  >;

  filters: {
    "Issue(address,uint256,uint256)": TypedContractEvent<
      IssueEvent.InputTuple,
      IssueEvent.OutputTuple,
      IssueEvent.OutputObject
    >;
    Issue: TypedContractEvent<
      IssueEvent.InputTuple,
      IssueEvent.OutputTuple,
      IssueEvent.OutputObject
    >;

    "OmnibusDeposit(address,address,uint256,uint8)": TypedContractEvent<
      OmnibusDepositEvent.InputTuple,
      OmnibusDepositEvent.OutputTuple,
      OmnibusDepositEvent.OutputObject
    >;
    OmnibusDeposit: TypedContractEvent<
      OmnibusDepositEvent.InputTuple,
      OmnibusDepositEvent.OutputTuple,
      OmnibusDepositEvent.OutputObject
    >;

    "OmnibusWithdraw(address,address,uint256,uint8)": TypedContractEvent<
      OmnibusWithdrawEvent.InputTuple,
      OmnibusWithdrawEvent.OutputTuple,
      OmnibusWithdrawEvent.OutputObject
    >;
    OmnibusWithdraw: TypedContractEvent<
      OmnibusWithdrawEvent.InputTuple,
      OmnibusWithdrawEvent.OutputTuple,
      OmnibusWithdrawEvent.OutputObject
    >;
  };
}
