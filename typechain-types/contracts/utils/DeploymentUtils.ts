/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DeploymentUtilsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BULK_OPERATOR"
      | "COMPLIANCE_CONFIGURATION"
      | "COMPLIANCE_SERVICE_NOT_REGULATED"
      | "COMPLIANCE_SERVICE_PARTITIONED"
      | "COMPLIANCE_SERVICE_REGULATED"
      | "COMPLIANCE_SERVICE_WHITELISTED"
      | "DS_TOKEN"
      | "DS_TOKEN_PARTITIONED"
      | "INVESTOR_LOCK_MANAGER"
      | "INVESTOR_LOCK_MANAGER_PARTITIONED"
      | "LOCK_MANAGER"
      | "OMNIBUS_TBE_CONTROLLER"
      | "OMNIBUS_TBE_CONTROLLER_WHITELISTED"
      | "PARTITIONS_MANAGER"
      | "REGISTRY_SERVICE"
      | "SECURITIZE_SWAP"
      | "TOKEN_ISSUER"
      | "TOKEN_REALLOCATOR"
      | "TRANSACTION_RELAYER"
      | "TRUST_SERVICE"
      | "WALLET_MANAGER"
      | "WALLET_REGISTRAR"
      | "addIssuerWallets"
      | "addPlatformWallets"
      | "copyImplementationContracts"
      | "deployBulkOperator"
      | "deployComplianceServiceNotRegulated"
      | "deployComplianceServicePartitioned"
      | "deployComplianceServiceRegulated"
      | "deployComplianceServiceWhitelisted"
      | "deployConfigurationService"
      | "deployDsToken"
      | "deployDsTokenPartitioned"
      | "deployInvestorLockManager"
      | "deployInvestorLockManagerPartitioned"
      | "deployLockManager"
      | "deployOmnibusTbeController"
      | "deployOmnibusTbeControllerWhitelisted"
      | "deployPartitionsManager"
      | "deployRegistryService"
      | "deploySecuritizeSwap"
      | "deployTokenIssuer"
      | "deployTokenReallocator"
      | "deployTransactionRelayer"
      | "deployTrustService"
      | "deployWalletManager"
      | "deployWalletRegistrar"
      | "getImplementationAddress"
      | "implementationAddresses"
      | "initialize"
      | "owner"
      | "setAllComplianceValues"
      | "setCountriesCompliance"
      | "setDSServices"
      | "setImplementationAddress"
      | "setImplementationAddresses"
      | "setRoles"
      | "transferOwnershipToMaster"
      | "transferTrustServiceOwnershipToMaster"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractDeployed"
      | "ImplementationAddressAdded"
      | "Initialized"
      | "ProxyContractDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BULK_OPERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_CONFIGURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE_NOT_REGULATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE_PARTITIONED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE_REGULATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE_WHITELISTED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DS_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DS_TOKEN_PARTITIONED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVESTOR_LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVESTOR_LOCK_MANAGER_PARTITIONED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER_WHITELISTED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTITIONS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRY_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITIZE_SWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REALLOCATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_REGISTRAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuerWallets",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlatformWallets",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "copyImplementationContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployBulkOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployComplianceServiceNotRegulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployComplianceServicePartitioned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployComplianceServiceRegulated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployComplianceServiceWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployConfigurationService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployDsToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDsTokenPartitioned",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployInvestorLockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployInvestorLockManagerPartitioned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployLockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployOmnibusTbeController",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOmnibusTbeControllerWhitelisted",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPartitionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployRegistryService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploySecuritizeSwap",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTokenIssuer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTokenReallocator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployTransactionRelayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployTrustService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployWalletManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployWalletRegistrar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementationAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementationAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllComplianceValues",
    values: [AddressLike, BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountriesCompliance",
    values: [AddressLike, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDSServices",
    values: [AddressLike, BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementationAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementationAddresses",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoles",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipToMaster",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTrustServiceOwnershipToMaster",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BULK_OPERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_CONFIGURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE_NOT_REGULATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE_PARTITIONED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE_REGULATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE_WHITELISTED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DS_TOKEN_PARTITIONED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVESTOR_LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVESTOR_LOCK_MANAGER_PARTITIONED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER_WHITELISTED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTITIONS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRY_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITIZE_SWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REALLOCATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_REGISTRAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIssuerWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlatformWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "copyImplementationContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployBulkOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployComplianceServiceNotRegulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployComplianceServicePartitioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployComplianceServiceRegulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployComplianceServiceWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployConfigurationService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployDsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployDsTokenPartitioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployInvestorLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployInvestorLockManagerPartitioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOmnibusTbeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOmnibusTbeControllerWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployPartitionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployRegistryService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploySecuritizeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTokenIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTokenReallocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTransactionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployTrustService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWalletManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWalletRegistrar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementationAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllComplianceValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCountriesCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDSServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementationAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipToMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTrustServiceOwnershipToMaster",
    data: BytesLike
  ): Result;
}

export namespace ContractDeployedEvent {
  export type InputTuple = [contractAddress: AddressLike];
  export type OutputTuple = [contractAddress: string];
  export interface OutputObject {
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ImplementationAddressAddedEvent {
  export type InputTuple = [service: BigNumberish, implementation: AddressLike];
  export type OutputTuple = [service: bigint, implementation: string];
  export interface OutputObject {
    service: bigint;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyContractDeployedEvent {
  export type InputTuple = [proxyAddress: AddressLike];
  export type OutputTuple = [proxyAddress: string];
  export interface OutputObject {
    proxyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeploymentUtils extends BaseContract {
  connect(runner?: ContractRunner | null): DeploymentUtils;
  waitForDeployment(): Promise<this>;

  interface: DeploymentUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BULK_OPERATOR: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_CONFIGURATION: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE_NOT_REGULATED: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE_PARTITIONED: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE_REGULATED: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE_WHITELISTED: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN_PARTITIONED: TypedContractMethod<[], [bigint], "view">;

  INVESTOR_LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  INVESTOR_LOCK_MANAGER_PARTITIONED: TypedContractMethod<[], [bigint], "view">;

  LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER_WHITELISTED: TypedContractMethod<[], [bigint], "view">;

  PARTITIONS_MANAGER: TypedContractMethod<[], [bigint], "view">;

  REGISTRY_SERVICE: TypedContractMethod<[], [bigint], "view">;

  SECURITIZE_SWAP: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ISSUER: TypedContractMethod<[], [bigint], "view">;

  TOKEN_REALLOCATOR: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_RELAYER: TypedContractMethod<[], [bigint], "view">;

  TRUST_SERVICE: TypedContractMethod<[], [bigint], "view">;

  WALLET_MANAGER: TypedContractMethod<[], [bigint], "view">;

  WALLET_REGISTRAR: TypedContractMethod<[], [bigint], "view">;

  addIssuerWallets: TypedContractMethod<
    [proxyWalletManager: AddressLike, wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  addPlatformWallets: TypedContractMethod<
    [proxyWalletManager: AddressLike, wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  copyImplementationContracts: TypedContractMethod<
    [_oldDeploymentUtils: AddressLike],
    [void],
    "nonpayable"
  >;

  deployBulkOperator: TypedContractMethod<
    [dsToken: AddressLike],
    [void],
    "nonpayable"
  >;

  deployComplianceServiceNotRegulated: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  deployComplianceServicePartitioned: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  deployComplianceServiceRegulated: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  deployComplianceServiceWhitelisted: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  deployConfigurationService: TypedContractMethod<[], [void], "nonpayable">;

  deployDsToken: TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  deployDsTokenPartitioned: TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  deployInvestorLockManager: TypedContractMethod<[], [void], "nonpayable">;

  deployInvestorLockManagerPartitioned: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  deployLockManager: TypedContractMethod<[], [void], "nonpayable">;

  deployOmnibusTbeController: TypedContractMethod<
    [omnibusWallet: AddressLike, isPartitionedToken: boolean],
    [void],
    "nonpayable"
  >;

  deployOmnibusTbeControllerWhitelisted: TypedContractMethod<
    [omnibusWallet: AddressLike, isPartitionedToken: boolean],
    [void],
    "nonpayable"
  >;

  deployPartitionsManager: TypedContractMethod<[], [void], "nonpayable">;

  deployRegistryService: TypedContractMethod<[], [void], "nonpayable">;

  deploySecuritizeSwap: TypedContractMethod<
    [dsToken: AddressLike, stableCoin: AddressLike, issuerWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  deployTokenIssuer: TypedContractMethod<[], [void], "nonpayable">;

  deployTokenReallocator: TypedContractMethod<[], [void], "nonpayable">;

  deployTransactionRelayer: TypedContractMethod<
    [chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deployTrustService: TypedContractMethod<[], [void], "nonpayable">;

  deployWalletManager: TypedContractMethod<[], [void], "nonpayable">;

  deployWalletRegistrar: TypedContractMethod<[], [void], "nonpayable">;

  getImplementationAddress: TypedContractMethod<
    [service: BigNumberish],
    [string],
    "view"
  >;

  implementationAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  setAllComplianceValues: TypedContractMethod<
    [
      proxyCompConfiguration: AddressLike,
      uintValues: BigNumberish[],
      boolValues: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  setCountriesCompliance: TypedContractMethod<
    [
      proxyCompConfiguration: AddressLike,
      countries: string[],
      values: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setDSServices: TypedContractMethod<
    [
      contractAddress: AddressLike,
      services: BigNumberish[],
      serviceAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  setImplementationAddress: TypedContractMethod<
    [service: BigNumberish, implementationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setImplementationAddresses: TypedContractMethod<
    [services: BigNumberish[], addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setRoles: TypedContractMethod<
    [
      proxyTrustService: AddressLike,
      addressesToSet: AddressLike[],
      roles: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  transferOwnershipToMaster: TypedContractMethod<
    [master: AddressLike, proxies: AddressLike[]],
    [void],
    "nonpayable"
  >;

  transferTrustServiceOwnershipToMaster: TypedContractMethod<
    [master: AddressLike, proxyTrustService: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BULK_OPERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_CONFIGURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE_NOT_REGULATED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE_PARTITIONED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE_REGULATED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE_WHITELISTED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN_PARTITIONED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INVESTOR_LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INVESTOR_LOCK_MANAGER_PARTITIONED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER_WHITELISTED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PARTITIONS_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRY_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITIZE_SWAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_REALLOCATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_RELAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUST_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_REGISTRAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addIssuerWallets"
  ): TypedContractMethod<
    [proxyWalletManager: AddressLike, wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPlatformWallets"
  ): TypedContractMethod<
    [proxyWalletManager: AddressLike, wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "copyImplementationContracts"
  ): TypedContractMethod<
    [_oldDeploymentUtils: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployBulkOperator"
  ): TypedContractMethod<[dsToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployComplianceServiceNotRegulated"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployComplianceServicePartitioned"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployComplianceServiceRegulated"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployComplianceServiceWhitelisted"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployConfigurationService"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployDsToken"
  ): TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployDsTokenPartitioned"
  ): TypedContractMethod<
    [name: string, symbol: string, decimals: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployInvestorLockManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployInvestorLockManagerPartitioned"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployLockManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployOmnibusTbeController"
  ): TypedContractMethod<
    [omnibusWallet: AddressLike, isPartitionedToken: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployOmnibusTbeControllerWhitelisted"
  ): TypedContractMethod<
    [omnibusWallet: AddressLike, isPartitionedToken: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployPartitionsManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployRegistryService"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deploySecuritizeSwap"
  ): TypedContractMethod<
    [dsToken: AddressLike, stableCoin: AddressLike, issuerWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployTokenIssuer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployTokenReallocator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployTransactionRelayer"
  ): TypedContractMethod<[chainId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployTrustService"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployWalletManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployWalletRegistrar"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getImplementationAddress"
  ): TypedContractMethod<[service: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "implementationAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAllComplianceValues"
  ): TypedContractMethod<
    [
      proxyCompConfiguration: AddressLike,
      uintValues: BigNumberish[],
      boolValues: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCountriesCompliance"
  ): TypedContractMethod<
    [
      proxyCompConfiguration: AddressLike,
      countries: string[],
      values: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDSServices"
  ): TypedContractMethod<
    [
      contractAddress: AddressLike,
      services: BigNumberish[],
      serviceAddresses: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setImplementationAddress"
  ): TypedContractMethod<
    [service: BigNumberish, implementationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setImplementationAddresses"
  ): TypedContractMethod<
    [services: BigNumberish[], addresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoles"
  ): TypedContractMethod<
    [
      proxyTrustService: AddressLike,
      addressesToSet: AddressLike[],
      roles: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipToMaster"
  ): TypedContractMethod<
    [master: AddressLike, proxies: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferTrustServiceOwnershipToMaster"
  ): TypedContractMethod<
    [master: AddressLike, proxyTrustService: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContractDeployed"
  ): TypedContractEvent<
    ContractDeployedEvent.InputTuple,
    ContractDeployedEvent.OutputTuple,
    ContractDeployedEvent.OutputObject
  >;
  getEvent(
    key: "ImplementationAddressAdded"
  ): TypedContractEvent<
    ImplementationAddressAddedEvent.InputTuple,
    ImplementationAddressAddedEvent.OutputTuple,
    ImplementationAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ProxyContractDeployed"
  ): TypedContractEvent<
    ProxyContractDeployedEvent.InputTuple,
    ProxyContractDeployedEvent.OutputTuple,
    ProxyContractDeployedEvent.OutputObject
  >;

  filters: {
    "ContractDeployed(address)": TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;
    ContractDeployed: TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;

    "ImplementationAddressAdded(uint8,address)": TypedContractEvent<
      ImplementationAddressAddedEvent.InputTuple,
      ImplementationAddressAddedEvent.OutputTuple,
      ImplementationAddressAddedEvent.OutputObject
    >;
    ImplementationAddressAdded: TypedContractEvent<
      ImplementationAddressAddedEvent.InputTuple,
      ImplementationAddressAddedEvent.OutputTuple,
      ImplementationAddressAddedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ProxyContractDeployed(address)": TypedContractEvent<
      ProxyContractDeployedEvent.InputTuple,
      ProxyContractDeployedEvent.OutputTuple,
      ProxyContractDeployedEvent.OutputObject
    >;
    ProxyContractDeployed: TypedContractEvent<
      ProxyContractDeployedEvent.InputTuple,
      ProxyContractDeployedEvent.OutputTuple,
      ProxyContractDeployedEvent.OutputObject
    >;
  };
}
