/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ProxyInterface extends Interface {
  getFunction(
    nameOrSignature: "owner" | "setOwner" | "setTarget" | "target"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProxyOwnerChanged" | "ProxyTargetSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTarget",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
}

export namespace ProxyOwnerChangedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProxyTargetSetEvent {
  export type InputTuple = [target: AddressLike];
  export type OutputTuple = [target: string];
  export interface OutputObject {
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Proxy extends BaseContract {
  connect(runner?: ContractRunner | null): Proxy;
  waitForDeployment(): Promise<this>;

  interface: ProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setTarget: TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;

  target: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTarget"
  ): TypedContractMethod<[_target: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "target"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ProxyOwnerChanged"
  ): TypedContractEvent<
    ProxyOwnerChangedEvent.InputTuple,
    ProxyOwnerChangedEvent.OutputTuple,
    ProxyOwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProxyTargetSet"
  ): TypedContractEvent<
    ProxyTargetSetEvent.InputTuple,
    ProxyTargetSetEvent.OutputTuple,
    ProxyTargetSetEvent.OutputObject
  >;

  filters: {
    "ProxyOwnerChanged(address)": TypedContractEvent<
      ProxyOwnerChangedEvent.InputTuple,
      ProxyOwnerChangedEvent.OutputTuple,
      ProxyOwnerChangedEvent.OutputObject
    >;
    ProxyOwnerChanged: TypedContractEvent<
      ProxyOwnerChangedEvent.InputTuple,
      ProxyOwnerChangedEvent.OutputTuple,
      ProxyOwnerChangedEvent.OutputObject
    >;

    "ProxyTargetSet(address)": TypedContractEvent<
      ProxyTargetSetEvent.InputTuple,
      ProxyTargetSetEvent.OutputTuple,
      ProxyTargetSetEvent.OutputObject
    >;
    ProxyTargetSet: TypedContractEvent<
      ProxyTargetSetEvent.InputTuple,
      ProxyTargetSetEvent.OutputTuple,
      ProxyTargetSetEvent.OutputObject
    >;
  };
}
