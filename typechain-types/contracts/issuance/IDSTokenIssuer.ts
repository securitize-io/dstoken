/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSTokenIssuerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCREDITED"
      | "KYC_APPROVED"
      | "QUALIFIED"
      | "getVersion"
      | "initialize"
      | "issueTokens"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "ACCREDITED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KYC_APPROVED",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QUALIFIED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueTokens",
    values: [
      string,
      AddressLike,
      BigNumberish[],
      string,
      BigNumberish[],
      BigNumberish[],
      string,
      string,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "ACCREDITED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "KYC_APPROVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QUALIFIED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueTokens",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSTokenIssuer extends BaseContract {
  connect(runner?: ContractRunner | null): IDSTokenIssuer;
  waitForDeployment(): Promise<this>;

  interface: IDSTokenIssuerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCREDITED: TypedContractMethod<[], [bigint], "view">;

  KYC_APPROVED: TypedContractMethod<[], [bigint], "view">;

  QUALIFIED: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  issueTokens: TypedContractMethod<
    [
      _id: string,
      _to: AddressLike,
      _issuanceValues: BigNumberish[],
      _reason: string,
      _locksValues: BigNumberish[],
      _lockReleaseTimes: BigNumberish[],
      _collisionHash: string,
      _country: string,
      attributeValues: BigNumberish[],
      attributeExpirations: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCREDITED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "KYC_APPROVED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "QUALIFIED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "issueTokens"
  ): TypedContractMethod<
    [
      _id: string,
      _to: AddressLike,
      _issuanceValues: BigNumberish[],
      _reason: string,
      _locksValues: BigNumberish[],
      _lockReleaseTimes: BigNumberish[],
      _collisionHash: string,
      _country: string,
      attributeValues: BigNumberish[],
      attributeExpirations: BigNumberish[]
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
