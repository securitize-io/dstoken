/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BaseSecuritizeSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dsToken"
      | "initialize"
      | "issuerWallet"
      | "stableCoinToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dsToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableCoinToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "dsToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableCoinToken",
    data: BytesLike
  ): Result;
}

export interface BaseSecuritizeSwap extends BaseContract {
  connect(runner?: ContractRunner | null): BaseSecuritizeSwap;
  waitForDeployment(): Promise<this>;

  interface: BaseSecuritizeSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dsToken: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _dsToken: AddressLike,
      _stableCoin: AddressLike,
      _issuerWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  issuerWallet: TypedContractMethod<[], [string], "view">;

  stableCoinToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dsToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _dsToken: AddressLike,
      _stableCoin: AddressLike,
      _issuerWallet: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issuerWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stableCoinToken"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
