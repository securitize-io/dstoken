/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ComplianceConfigurationDataStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedSecurities"
      | "blockFlowbackEndTime"
      | "countriesCompliances"
      | "disallowBackDating"
      | "euRetailInvestorsLimit"
      | "forceAccredited"
      | "forceAccreditedUS"
      | "forceFullTransfer"
      | "jpInvestorsLimit"
      | "maxUSInvestorsPercentage"
      | "maximumHoldingsPerInvestor"
      | "minEUTokens"
      | "minUSTokens"
      | "minimumHoldingsPerInvestor"
      | "minimumTotalInvestors"
      | "nonAccreditedInvestorsLimit"
      | "nonUSLockPeriod"
      | "totalInvestorsLimit"
      | "usAccreditedInvestorsLimit"
      | "usInvestorsLimit"
      | "usLockPeriod"
      | "worldWideForceFullTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizedSecurities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockFlowbackEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countriesCompliances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowBackDating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "euRetailInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAccredited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAccreditedUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceFullTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jpInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUSInvestorsPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minEUTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minUSTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTotalInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonUSLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldWideForceFullTransfer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedSecurities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockFlowbackEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countriesCompliances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowBackDating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "euRetailInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAccredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAccreditedUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jpInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUSInvestorsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minEUTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minUSTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTotalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldWideForceFullTransfer",
    data: BytesLike
  ): Result;
}

export interface ComplianceConfigurationDataStore extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceConfigurationDataStore;
  waitForDeployment(): Promise<this>;

  interface: ComplianceConfigurationDataStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedSecurities: TypedContractMethod<[], [bigint], "view">;

  blockFlowbackEndTime: TypedContractMethod<[], [bigint], "view">;

  countriesCompliances: TypedContractMethod<[arg0: string], [bigint], "view">;

  disallowBackDating: TypedContractMethod<[], [boolean], "view">;

  euRetailInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  forceAccredited: TypedContractMethod<[], [boolean], "view">;

  forceAccreditedUS: TypedContractMethod<[], [boolean], "view">;

  forceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  jpInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  maxUSInvestorsPercentage: TypedContractMethod<[], [bigint], "view">;

  maximumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  minEUTokens: TypedContractMethod<[], [bigint], "view">;

  minUSTokens: TypedContractMethod<[], [bigint], "view">;

  minimumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  minimumTotalInvestors: TypedContractMethod<[], [bigint], "view">;

  nonAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  nonUSLockPeriod: TypedContractMethod<[], [bigint], "view">;

  totalInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  usAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  usInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  usLockPeriod: TypedContractMethod<[], [bigint], "view">;

  worldWideForceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedSecurities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockFlowbackEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "countriesCompliances"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "disallowBackDating"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "euRetailInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceAccredited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "forceAccreditedUS"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "forceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "jpInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxUSInvestorsPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minEUTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minUSTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumTotalInvestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonUSLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "worldWideForceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
