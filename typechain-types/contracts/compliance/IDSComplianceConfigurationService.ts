/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSComplianceConfigurationServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAll"
      | "getAuthorizedSecurities"
      | "getBlockFlowbackEndTime"
      | "getCountryCompliance"
      | "getDisallowBackDating"
      | "getEURetailInvestorsLimit"
      | "getForceAccredited"
      | "getForceAccreditedUS"
      | "getForceFullTransfer"
      | "getJPInvestorsLimit"
      | "getMaxUSInvestorsPercentage"
      | "getMaximumHoldingsPerInvestor"
      | "getMinEUTokens"
      | "getMinUSTokens"
      | "getMinimumHoldingsPerInvestor"
      | "getMinimumTotalInvestors"
      | "getNonAccreditedInvestorsLimit"
      | "getNonUSLockPeriod"
      | "getTotalInvestorsLimit"
      | "getUSAccreditedInvestorsLimit"
      | "getUSInvestorsLimit"
      | "getUSLockPeriod"
      | "getVersion"
      | "getWorldWideForceFullTransfer"
      | "initialize"
      | "setAll"
      | "setAuthorizedSecurities"
      | "setBlockFlowbackEndTime"
      | "setCountriesCompliance"
      | "setCountryCompliance"
      | "setDisallowBackDating"
      | "setEURetailInvestorsLimit"
      | "setForceAccredited"
      | "setForceAccreditedUS"
      | "setForceFullTransfer"
      | "setJPInvestorsLimit"
      | "setMaxUSInvestorsPercentage"
      | "setMaximumHoldingsPerInvestor"
      | "setMinEUTokens"
      | "setMinUSTokens"
      | "setMinimumHoldingsPerInvestor"
      | "setMinimumTotalInvestors"
      | "setNonAccreditedInvestorsLimit"
      | "setNonUSLockPeriod"
      | "setTotalInvestorsLimit"
      | "setUSAccreditedInvestorsLimit"
      | "setUSInvestorsLimit"
      | "setUSLockPeriod"
      | "setWorldWideForceFullTransfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSComplianceBoolRuleSet"
      | "DSComplianceStringToUIntMapRuleSet"
      | "DSComplianceUIntRuleSet"
      | "Initialized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSecurities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockFlowbackEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCountryCompliance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisallowBackDating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEURetailInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForceAccredited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForceAccreditedUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForceFullTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJPInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxUSInvestorsPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinEUTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinUSTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumTotalInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonUSLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldWideForceFullTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAll",
    values: [BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedSecurities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockFlowbackEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountriesCompliance",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountryCompliance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisallowBackDating",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEURetailInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceAccredited",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceAccreditedUS",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceFullTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setJPInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxUSInvestorsPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumHoldingsPerInvestor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinEUTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUSTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumHoldingsPerInvestor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumTotalInvestors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonAccreditedInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonUSLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSAccreditedInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldWideForceFullTransfer",
    values: [boolean]
  ): string;

  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSecurities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockFlowbackEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountryCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisallowBackDating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEURetailInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceAccredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceAccreditedUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJPInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxUSInvestorsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinEUTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinUSTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumTotalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldWideForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedSecurities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockFlowbackEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCountriesCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCountryCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisallowBackDating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEURetailInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceAccredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceAccreditedUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJPInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxUSInvestorsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinEUTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUSTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumTotalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldWideForceFullTransfer",
    data: BytesLike
  ): Result;
}

export namespace DSComplianceBoolRuleSetEvent {
  export type InputTuple = [
    ruleName: string,
    prevValue: boolean,
    newValue: boolean
  ];
  export type OutputTuple = [
    ruleName: string,
    prevValue: boolean,
    newValue: boolean
  ];
  export interface OutputObject {
    ruleName: string;
    prevValue: boolean;
    newValue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSComplianceStringToUIntMapRuleSetEvent {
  export type InputTuple = [
    ruleName: string,
    keyValue: string,
    prevValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [
    ruleName: string,
    keyValue: string,
    prevValue: bigint,
    newValue: bigint
  ];
  export interface OutputObject {
    ruleName: string;
    keyValue: string;
    prevValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSComplianceUIntRuleSetEvent {
  export type InputTuple = [
    ruleName: string,
    prevValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [
    ruleName: string,
    prevValue: bigint,
    newValue: bigint
  ];
  export interface OutputObject {
    ruleName: string;
    prevValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSComplianceConfigurationService extends BaseContract {
  connect(runner?: ContractRunner | null): IDSComplianceConfigurationService;
  waitForDeployment(): Promise<this>;

  interface: IDSComplianceConfigurationServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAll: TypedContractMethod<[], [[bigint[], boolean[]]], "view">;

  getAuthorizedSecurities: TypedContractMethod<[], [bigint], "view">;

  getBlockFlowbackEndTime: TypedContractMethod<[], [bigint], "view">;

  getCountryCompliance: TypedContractMethod<
    [_country: string],
    [bigint],
    "view"
  >;

  getDisallowBackDating: TypedContractMethod<[], [boolean], "view">;

  getEURetailInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getForceAccredited: TypedContractMethod<[], [boolean], "view">;

  getForceAccreditedUS: TypedContractMethod<[], [boolean], "view">;

  getForceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  getJPInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getMaxUSInvestorsPercentage: TypedContractMethod<[], [bigint], "view">;

  getMaximumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  getMinEUTokens: TypedContractMethod<[], [bigint], "view">;

  getMinUSTokens: TypedContractMethod<[], [bigint], "view">;

  getMinimumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  getMinimumTotalInvestors: TypedContractMethod<[], [bigint], "view">;

  getNonAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getNonUSLockPeriod: TypedContractMethod<[], [bigint], "view">;

  getTotalInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getUSAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getUSInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getUSLockPeriod: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  getWorldWideForceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  setAll: TypedContractMethod<
    [_uint_values: BigNumberish[], _bool_values: boolean[]],
    [void],
    "nonpayable"
  >;

  setAuthorizedSecurities: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBlockFlowbackEndTime: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCountriesCompliance: TypedContractMethod<
    [_countries: string[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setCountryCompliance: TypedContractMethod<
    [_country: string, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDisallowBackDating: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setEURetailInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setForceAccredited: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setForceAccreditedUS: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setForceFullTransfer: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setJPInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxUSInvestorsPercentage: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaximumHoldingsPerInvestor: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinEUTokens: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinUSTokens: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumHoldingsPerInvestor: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumTotalInvestors: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNonAccreditedInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNonUSLockPeriod: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSAccreditedInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSLockPeriod: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWorldWideForceFullTransfer: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAll"
  ): TypedContractMethod<[], [[bigint[], boolean[]]], "view">;
  getFunction(
    nameOrSignature: "getAuthorizedSecurities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockFlowbackEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCountryCompliance"
  ): TypedContractMethod<[_country: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDisallowBackDating"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getEURetailInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getForceAccredited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getForceAccreditedUS"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getForceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getJPInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxUSInvestorsPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaximumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinEUTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinUSTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumTotalInvestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonUSLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWorldWideForceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAll"
  ): TypedContractMethod<
    [_uint_values: BigNumberish[], _bool_values: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedSecurities"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBlockFlowbackEndTime"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCountriesCompliance"
  ): TypedContractMethod<
    [_countries: string[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCountryCompliance"
  ): TypedContractMethod<
    [_country: string, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDisallowBackDating"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEURetailInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForceAccredited"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForceAccreditedUS"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForceFullTransfer"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setJPInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxUSInvestorsPercentage"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaximumHoldingsPerInvestor"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinEUTokens"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinUSTokens"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumHoldingsPerInvestor"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumTotalInvestors"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNonAccreditedInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNonUSLockPeriod"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSAccreditedInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSLockPeriod"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWorldWideForceFullTransfer"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;

  getEvent(
    key: "DSComplianceBoolRuleSet"
  ): TypedContractEvent<
    DSComplianceBoolRuleSetEvent.InputTuple,
    DSComplianceBoolRuleSetEvent.OutputTuple,
    DSComplianceBoolRuleSetEvent.OutputObject
  >;
  getEvent(
    key: "DSComplianceStringToUIntMapRuleSet"
  ): TypedContractEvent<
    DSComplianceStringToUIntMapRuleSetEvent.InputTuple,
    DSComplianceStringToUIntMapRuleSetEvent.OutputTuple,
    DSComplianceStringToUIntMapRuleSetEvent.OutputObject
  >;
  getEvent(
    key: "DSComplianceUIntRuleSet"
  ): TypedContractEvent<
    DSComplianceUIntRuleSetEvent.InputTuple,
    DSComplianceUIntRuleSetEvent.OutputTuple,
    DSComplianceUIntRuleSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "DSComplianceBoolRuleSet(string,bool,bool)": TypedContractEvent<
      DSComplianceBoolRuleSetEvent.InputTuple,
      DSComplianceBoolRuleSetEvent.OutputTuple,
      DSComplianceBoolRuleSetEvent.OutputObject
    >;
    DSComplianceBoolRuleSet: TypedContractEvent<
      DSComplianceBoolRuleSetEvent.InputTuple,
      DSComplianceBoolRuleSetEvent.OutputTuple,
      DSComplianceBoolRuleSetEvent.OutputObject
    >;

    "DSComplianceStringToUIntMapRuleSet(string,string,uint256,uint256)": TypedContractEvent<
      DSComplianceStringToUIntMapRuleSetEvent.InputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputObject
    >;
    DSComplianceStringToUIntMapRuleSet: TypedContractEvent<
      DSComplianceStringToUIntMapRuleSetEvent.InputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputObject
    >;

    "DSComplianceUIntRuleSet(string,uint256,uint256)": TypedContractEvent<
      DSComplianceUIntRuleSetEvent.InputTuple,
      DSComplianceUIntRuleSetEvent.OutputTuple,
      DSComplianceUIntRuleSetEvent.OutputObject
    >;
    DSComplianceUIntRuleSet: TypedContractEvent<
      DSComplianceUIntRuleSetEvent.InputTuple,
      DSComplianceUIntRuleSetEvent.OutputTuple,
      DSComplianceUIntRuleSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
