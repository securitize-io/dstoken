/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WalletManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPLIANCE_CONFIGURATION_SERVICE"
      | "COMPLIANCE_SERVICE"
      | "DS_TOKEN"
      | "EXCHANGE"
      | "ISSUER"
      | "LOCK_MANAGER"
      | "NONE"
      | "OMNIBUS_TBE_CONTROLLER"
      | "PARTITIONS_MANAGER"
      | "PLATFORM"
      | "REGISTRY_SERVICE"
      | "ROLE_EXCHANGE"
      | "ROLE_ISSUER"
      | "ROLE_MASTER"
      | "ROLE_NONE"
      | "ROLE_TRANSFER_AGENT"
      | "SECURITIZE_SWAP"
      | "TOKEN_ISSUER"
      | "TOKEN_REALLOCATOR"
      | "TRANSACTION_RELAYER"
      | "TRUST_SERVICE"
      | "UNUSED_1"
      | "WALLET_MANAGER"
      | "WALLET_REGISTRAR"
      | "addExchangeWallet"
      | "addIssuerWallet"
      | "addIssuerWallets"
      | "addPlatformWallet"
      | "addPlatformWallets"
      | "contractOwner"
      | "getDSService"
      | "getVersion"
      | "getWalletType"
      | "initialize"
      | "isIssuerSpecialWallet"
      | "isOwner"
      | "isPlatformWallet"
      | "isSpecialWallet"
      | "owner"
      | "removeSpecialWallet"
      | "renounceOwnership"
      | "setDSService"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSServiceSet"
      | "DSWalletManagerReservedSlotsSet"
      | "DSWalletManagerSpecialWalletAdded"
      | "DSWalletManagerSpecialWalletRemoved"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DS_TOKEN", values?: undefined): string;
  encodeFunctionData(functionFragment: "EXCHANGE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ISSUER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTITIONS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PLATFORM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REGISTRY_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_EXCHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_TRANSFER_AGENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITIZE_SWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REALLOCATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNUSED_1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WALLET_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_REGISTRAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addExchangeWallet",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuerWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuerWallets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlatformWallets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDSService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuerSpecialWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpecialWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSpecialWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDSService",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "EXCHANGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ISSUER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTITIONS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PLATFORM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRY_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_EXCHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TRANSFER_AGENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITIZE_SWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REALLOCATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNUSED_1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_REGISTRAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExchangeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIssuerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIssuerWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlatformWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIssuerSpecialWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpecialWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSpecialWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DSServiceSetEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    serviceAddress: AddressLike
  ];
  export type OutputTuple = [serviceId: bigint, serviceAddress: string];
  export interface OutputObject {
    serviceId: bigint;
    serviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSWalletManagerReservedSlotsSetEvent {
  export type InputTuple = [
    wallet: AddressLike,
    country: string,
    accreditationStatus: BigNumberish,
    slots: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    country: string,
    accreditationStatus: bigint,
    slots: bigint,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    country: string;
    accreditationStatus: bigint;
    slots: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSWalletManagerSpecialWalletAddedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    walletType: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    walletType: bigint,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    walletType: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSWalletManagerSpecialWalletRemovedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    walletType: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    walletType: bigint,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    walletType: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WalletManager extends BaseContract {
  connect(runner?: ContractRunner | null): WalletManager;
  waitForDeployment(): Promise<this>;

  interface: WalletManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPLIANCE_CONFIGURATION_SERVICE: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN: TypedContractMethod<[], [bigint], "view">;

  EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ISSUER: TypedContractMethod<[], [bigint], "view">;

  LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  NONE: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER: TypedContractMethod<[], [bigint], "view">;

  PARTITIONS_MANAGER: TypedContractMethod<[], [bigint], "view">;

  PLATFORM: TypedContractMethod<[], [bigint], "view">;

  REGISTRY_SERVICE: TypedContractMethod<[], [bigint], "view">;

  ROLE_EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ROLE_ISSUER: TypedContractMethod<[], [bigint], "view">;

  ROLE_MASTER: TypedContractMethod<[], [bigint], "view">;

  ROLE_NONE: TypedContractMethod<[], [bigint], "view">;

  ROLE_TRANSFER_AGENT: TypedContractMethod<[], [bigint], "view">;

  SECURITIZE_SWAP: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ISSUER: TypedContractMethod<[], [bigint], "view">;

  TOKEN_REALLOCATOR: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_RELAYER: TypedContractMethod<[], [bigint], "view">;

  TRUST_SERVICE: TypedContractMethod<[], [bigint], "view">;

  UNUSED_1: TypedContractMethod<[], [bigint], "view">;

  WALLET_MANAGER: TypedContractMethod<[], [bigint], "view">;

  WALLET_REGISTRAR: TypedContractMethod<[], [bigint], "view">;

  addExchangeWallet: TypedContractMethod<
    [_wallet: AddressLike, _owner: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addIssuerWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addIssuerWallets: TypedContractMethod<
    [_wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  addPlatformWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addPlatformWallets: TypedContractMethod<
    [_wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  contractOwner: TypedContractMethod<[], [string], "view">;

  getDSService: TypedContractMethod<
    [_serviceId: BigNumberish],
    [string],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  getWalletType: TypedContractMethod<[_wallet: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isIssuerSpecialWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  isOwner: TypedContractMethod<[], [boolean], "view">;

  isPlatformWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  isSpecialWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeSpecialWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDSService: TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPLIANCE_CONFIGURATION_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PARTITIONS_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRY_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_MASTER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_TRANSFER_AGENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITIZE_SWAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_REALLOCATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_RELAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUST_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNUSED_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_REGISTRAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addExchangeWallet"
  ): TypedContractMethod<
    [_wallet: AddressLike, _owner: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addIssuerWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "addIssuerWallets"
  ): TypedContractMethod<[_wallets: AddressLike[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "addPlatformWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "addPlatformWallets"
  ): TypedContractMethod<[_wallets: AddressLike[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "contractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDSService"
  ): TypedContractMethod<[_serviceId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWalletType"
  ): TypedContractMethod<[_wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isIssuerSpecialWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlatformWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpecialWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSpecialWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDSService"
  ): TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DSServiceSet"
  ): TypedContractEvent<
    DSServiceSetEvent.InputTuple,
    DSServiceSetEvent.OutputTuple,
    DSServiceSetEvent.OutputObject
  >;
  getEvent(
    key: "DSWalletManagerReservedSlotsSet"
  ): TypedContractEvent<
    DSWalletManagerReservedSlotsSetEvent.InputTuple,
    DSWalletManagerReservedSlotsSetEvent.OutputTuple,
    DSWalletManagerReservedSlotsSetEvent.OutputObject
  >;
  getEvent(
    key: "DSWalletManagerSpecialWalletAdded"
  ): TypedContractEvent<
    DSWalletManagerSpecialWalletAddedEvent.InputTuple,
    DSWalletManagerSpecialWalletAddedEvent.OutputTuple,
    DSWalletManagerSpecialWalletAddedEvent.OutputObject
  >;
  getEvent(
    key: "DSWalletManagerSpecialWalletRemoved"
  ): TypedContractEvent<
    DSWalletManagerSpecialWalletRemovedEvent.InputTuple,
    DSWalletManagerSpecialWalletRemovedEvent.OutputTuple,
    DSWalletManagerSpecialWalletRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DSServiceSet(uint256,address)": TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;
    DSServiceSet: TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;

    "DSWalletManagerReservedSlotsSet(address,string,uint8,uint256,address)": TypedContractEvent<
      DSWalletManagerReservedSlotsSetEvent.InputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputObject
    >;
    DSWalletManagerReservedSlotsSet: TypedContractEvent<
      DSWalletManagerReservedSlotsSetEvent.InputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputObject
    >;

    "DSWalletManagerSpecialWalletAdded(address,uint8,address)": TypedContractEvent<
      DSWalletManagerSpecialWalletAddedEvent.InputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputObject
    >;
    DSWalletManagerSpecialWalletAdded: TypedContractEvent<
      DSWalletManagerSpecialWalletAddedEvent.InputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputObject
    >;

    "DSWalletManagerSpecialWalletRemoved(address,uint8,address)": TypedContractEvent<
      DSWalletManagerSpecialWalletRemovedEvent.InputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputObject
    >;
    DSWalletManagerSpecialWalletRemoved: TypedContractEvent<
      DSWalletManagerSpecialWalletRemovedEvent.InputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
