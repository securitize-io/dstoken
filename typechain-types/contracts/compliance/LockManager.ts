/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LockManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPLIANCE_CONFIGURATION_SERVICE"
      | "COMPLIANCE_SERVICE"
      | "DS_TOKEN"
      | "LOCK_MANAGER"
      | "OMNIBUS_TBE_CONTROLLER"
      | "PARTITIONS_MANAGER"
      | "REGISTRY_SERVICE"
      | "ROLE_EXCHANGE"
      | "ROLE_ISSUER"
      | "ROLE_MASTER"
      | "ROLE_NONE"
      | "ROLE_TRANSFER_AGENT"
      | "SECURITIZE_SWAP"
      | "TOKEN_ISSUER"
      | "TOKEN_REALLOCATOR"
      | "TRANSACTION_RELAYER"
      | "TRUST_SERVICE"
      | "UNUSED_1"
      | "WALLET_MANAGER"
      | "WALLET_REGISTRAR"
      | "addManualLockRecord"
      | "contractOwner"
      | "createLockForHolder"
      | "createLockForInvestor"
      | "getDSService"
      | "getTransferableTokens"
      | "getTransferableTokensForHolder"
      | "getTransferableTokensForInvestor"
      | "getVersion"
      | "initialize"
      | "isInvestorLocked"
      | "isOwner"
      | "lockCount"
      | "lockCountForHolder"
      | "lockCountForInvestor"
      | "lockInfo"
      | "lockInfoForHolder"
      | "lockInfoForInvestor"
      | "lockInvestor"
      | "owner"
      | "removeLockRecord"
      | "removeLockRecordForHolder"
      | "removeLockRecordForInvestor"
      | "renounceOwnership"
      | "setDSService"
      | "transferOwnership"
      | "unlockInvestor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSServiceSet"
      | "HolderLocked"
      | "HolderUnlocked"
      | "Initialized"
      | "Locked"
      | "OwnershipTransferred"
      | "Unlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DS_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTITIONS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRY_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_EXCHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_TRANSFER_AGENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITIZE_SWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REALLOCATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNUSED_1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WALLET_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_REGISTRAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addManualLockRecord",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLockForHolder",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockForInvestor",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDSService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokensForHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokensForInvestor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInvestorLocked",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCountForHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCountForInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfoForHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfoForInvestor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInvestor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLockRecord",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecordForHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecordForInvestor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDSService",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockInvestor",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTITIONS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRY_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_EXCHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TRANSFER_AGENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITIZE_SWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REALLOCATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNUSED_1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_REGISTRAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManualLockRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokensForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokensForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInvestorLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockCountForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCountForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockInfoForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockInfoForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecordForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecordForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockInvestor",
    data: BytesLike
  ): Result;
}

export namespace DSServiceSetEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    serviceAddress: AddressLike
  ];
  export type OutputTuple = [serviceId: bigint, serviceAddress: string];
  export interface OutputObject {
    serviceId: bigint;
    serviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HolderLockedEvent {
  export type InputTuple = [
    holderId: string,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    holderId: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    holderId: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HolderUnlockedEvent {
  export type InputTuple = [
    holderId: string,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    holderId: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    holderId: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockedEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LockManager extends BaseContract {
  connect(runner?: ContractRunner | null): LockManager;
  waitForDeployment(): Promise<this>;

  interface: LockManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPLIANCE_CONFIGURATION_SERVICE: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN: TypedContractMethod<[], [bigint], "view">;

  LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER: TypedContractMethod<[], [bigint], "view">;

  PARTITIONS_MANAGER: TypedContractMethod<[], [bigint], "view">;

  REGISTRY_SERVICE: TypedContractMethod<[], [bigint], "view">;

  ROLE_EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ROLE_ISSUER: TypedContractMethod<[], [bigint], "view">;

  ROLE_MASTER: TypedContractMethod<[], [bigint], "view">;

  ROLE_NONE: TypedContractMethod<[], [bigint], "view">;

  ROLE_TRANSFER_AGENT: TypedContractMethod<[], [bigint], "view">;

  SECURITIZE_SWAP: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ISSUER: TypedContractMethod<[], [bigint], "view">;

  TOKEN_REALLOCATOR: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_RELAYER: TypedContractMethod<[], [bigint], "view">;

  TRUST_SERVICE: TypedContractMethod<[], [bigint], "view">;

  UNUSED_1: TypedContractMethod<[], [bigint], "view">;

  WALLET_MANAGER: TypedContractMethod<[], [bigint], "view">;

  WALLET_REGISTRAR: TypedContractMethod<[], [bigint], "view">;

  addManualLockRecord: TypedContractMethod<
    [
      _to: AddressLike,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  contractOwner: TypedContractMethod<[], [string], "view">;

  createLockForHolder: TypedContractMethod<
    [
      _holder: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "view"
  >;

  createLockForInvestor: TypedContractMethod<
    [
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      arg4: BigNumberish
    ],
    [void],
    "view"
  >;

  getDSService: TypedContractMethod<
    [_serviceId: BigNumberish],
    [string],
    "view"
  >;

  getTransferableTokens: TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish],
    [bigint],
    "view"
  >;

  getTransferableTokensForHolder: TypedContractMethod<
    [_holderId: string, _time: BigNumberish],
    [bigint],
    "view"
  >;

  getTransferableTokensForInvestor: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isInvestorLocked: TypedContractMethod<[arg0: string], [boolean], "view">;

  isOwner: TypedContractMethod<[], [boolean], "view">;

  lockCount: TypedContractMethod<[_who: AddressLike], [bigint], "view">;

  lockCountForHolder: TypedContractMethod<
    [_holderId: string],
    [bigint],
    "view"
  >;

  lockCountForInvestor: TypedContractMethod<[arg0: string], [bigint], "view">;

  lockInfo: TypedContractMethod<
    [_who: AddressLike, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInfoForHolder: TypedContractMethod<
    [_holderId: string, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInfoForInvestor: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInvestor: TypedContractMethod<[arg0: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeLockRecord: TypedContractMethod<
    [_to: AddressLike, _lockIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  removeLockRecordForHolder: TypedContractMethod<
    [_holderId: string, _lockIndex: BigNumberish],
    [boolean],
    "view"
  >;

  removeLockRecordForInvestor: TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDSService: TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unlockInvestor: TypedContractMethod<[arg0: string], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPLIANCE_CONFIGURATION_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PARTITIONS_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRY_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_MASTER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_TRANSFER_AGENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITIZE_SWAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_REALLOCATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_RELAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUST_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNUSED_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_REGISTRAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addManualLockRecord"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createLockForHolder"
  ): TypedContractMethod<
    [
      _holder: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "createLockForInvestor"
  ): TypedContractMethod<
    [
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      arg4: BigNumberish
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDSService"
  ): TypedContractMethod<[_serviceId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTransferableTokens"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokensForHolder"
  ): TypedContractMethod<
    [_holderId: string, _time: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokensForInvestor"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInvestorLocked"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockCount"
  ): TypedContractMethod<[_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockCountForHolder"
  ): TypedContractMethod<[_holderId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockCountForInvestor"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockInfo"
  ): TypedContractMethod<
    [_who: AddressLike, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInfoForHolder"
  ): TypedContractMethod<
    [_holderId: string, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInfoForInvestor"
  ): TypedContractMethod<
    [arg0: string, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInvestor"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLockRecord"
  ): TypedContractMethod<
    [_to: AddressLike, _lockIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLockRecordForHolder"
  ): TypedContractMethod<
    [_holderId: string, _lockIndex: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLockRecordForInvestor"
  ): TypedContractMethod<[arg0: string, arg1: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDSService"
  ): TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockInvestor"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;

  getEvent(
    key: "DSServiceSet"
  ): TypedContractEvent<
    DSServiceSetEvent.InputTuple,
    DSServiceSetEvent.OutputTuple,
    DSServiceSetEvent.OutputObject
  >;
  getEvent(
    key: "HolderLocked"
  ): TypedContractEvent<
    HolderLockedEvent.InputTuple,
    HolderLockedEvent.OutputTuple,
    HolderLockedEvent.OutputObject
  >;
  getEvent(
    key: "HolderUnlocked"
  ): TypedContractEvent<
    HolderUnlockedEvent.InputTuple,
    HolderUnlockedEvent.OutputTuple,
    HolderUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Locked"
  ): TypedContractEvent<
    LockedEvent.InputTuple,
    LockedEvent.OutputTuple,
    LockedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Unlocked"
  ): TypedContractEvent<
    UnlockedEvent.InputTuple,
    UnlockedEvent.OutputTuple,
    UnlockedEvent.OutputObject
  >;

  filters: {
    "DSServiceSet(uint256,address)": TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;
    DSServiceSet: TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;

    "HolderLocked(string,uint256,uint256,string,uint256)": TypedContractEvent<
      HolderLockedEvent.InputTuple,
      HolderLockedEvent.OutputTuple,
      HolderLockedEvent.OutputObject
    >;
    HolderLocked: TypedContractEvent<
      HolderLockedEvent.InputTuple,
      HolderLockedEvent.OutputTuple,
      HolderLockedEvent.OutputObject
    >;

    "HolderUnlocked(string,uint256,uint256,string,uint256)": TypedContractEvent<
      HolderUnlockedEvent.InputTuple,
      HolderUnlockedEvent.OutputTuple,
      HolderUnlockedEvent.OutputObject
    >;
    HolderUnlocked: TypedContractEvent<
      HolderUnlockedEvent.InputTuple,
      HolderUnlockedEvent.OutputTuple,
      HolderUnlockedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Locked(address,uint256,uint256,string,uint256)": TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;
    Locked: TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Unlocked(address,uint256,uint256,string,uint256)": TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
    Unlocked: TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
  };
}
