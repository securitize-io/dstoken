/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSComplianceServicePartitionedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adjustInvestorCountsAfterCountryChange"
      | "getComplianceTransferableTokens(address,uint256,bool,bytes32)"
      | "getComplianceTransferableTokens(address,uint256,bool)"
      | "getComplianceTransferableTokens(address,uint256,address)"
      | "getComplianceTransferableTokens(address,uint256,address,bytes32)"
      | "getVersion"
      | "initialize"
      | "preInternalTransferCheck"
      | "preIssuanceCheck"
      | "preTransferCheck"
      | "validateBurn"
      | "validateIssuance"
      | "validateIssuanceTime"
      | "validateIssuanceWithNoCompliance"
      | "validateSeize"
      | "validateTransfer(address,address,uint256)"
      | "validateTransfer(address,address,uint256,bool,uint256)"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "adjustInvestorCountsAfterCountryChange",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool,bytes32)",
    values: [AddressLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool)",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address,bytes32)",
    values: [AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preInternalTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preIssuanceCheck",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuanceTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuanceWithNoCompliance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSeize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,uint256,bool,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustInvestorCountsAfterCountryChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preInternalTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preIssuanceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuanceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuanceWithNoCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSeize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,uint256,bool,uint256)",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSComplianceServicePartitioned extends BaseContract {
  connect(runner?: ContractRunner | null): IDSComplianceServicePartitioned;
  waitForDeployment(): Promise<this>;

  interface: IDSComplianceServicePartitionedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adjustInvestorCountsAfterCountryChange: TypedContractMethod<
    [_id: string, _country: string, _prevCountry: string],
    [boolean],
    "nonpayable"
  >;

  "getComplianceTransferableTokens(address,uint256,bool,bytes32)": TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _checkFlowback: boolean,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,bool)": TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _checkFlowback: boolean],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,address)": TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _to: AddressLike],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,address,bytes32)": TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _to: AddressLike,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  preInternalTransferCheck: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  preIssuanceCheck: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  preTransferCheck: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  validateBurn: TypedContractMethod<
    [_who: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateIssuance: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateIssuanceTime: TypedContractMethod<
    [_issuanceTime: BigNumberish],
    [bigint],
    "view"
  >;

  validateIssuanceWithNoCompliance: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateSeize: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "validateTransfer(address,address,uint256)": TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "validateTransfer(address,address,uint256,bool,uint256)": TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _pausedToken: boolean,
      _balanceFrom: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adjustInvestorCountsAfterCountryChange"
  ): TypedContractMethod<
    [_id: string, _country: string, _prevCountry: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,bool,bytes32)"
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _checkFlowback: boolean,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,bool)"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _checkFlowback: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,address)"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _to: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,address,bytes32)"
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _to: AddressLike,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "preInternalTransferCheck"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "preIssuanceCheck"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "preTransferCheck"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateBurn"
  ): TypedContractMethod<
    [_who: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateIssuance"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateIssuanceTime"
  ): TypedContractMethod<[_issuanceTime: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "validateIssuanceWithNoCompliance"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateSeize"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,uint256)"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,uint256,bool,uint256)"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _pausedToken: boolean,
      _balanceFrom: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
