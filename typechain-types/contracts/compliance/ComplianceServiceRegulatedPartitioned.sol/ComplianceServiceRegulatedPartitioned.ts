/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ComplianceServiceRegulatedPartitionedInterface
  extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPLIANCE_CONFIGURATION_SERVICE"
      | "COMPLIANCE_SERVICE"
      | "DS_TOKEN"
      | "LOCK_MANAGER"
      | "OMNIBUS_TBE_CONTROLLER"
      | "PARTITIONS_MANAGER"
      | "REGISTRY_SERVICE"
      | "ROLE_EXCHANGE"
      | "ROLE_ISSUER"
      | "ROLE_MASTER"
      | "ROLE_NONE"
      | "ROLE_TRANSFER_AGENT"
      | "SECURITIZE_SWAP"
      | "TOKEN_ISSUER"
      | "TOKEN_REALLOCATOR"
      | "TRANSACTION_RELAYER"
      | "TRUST_SERVICE"
      | "UNUSED_1"
      | "WALLET_MANAGER"
      | "WALLET_REGISTRAR"
      | "adjustInvestorCountsAfterCountryChange"
      | "checkWhitelisted"
      | "contractOwner"
      | "getAccreditedInvestorsCount"
      | "getComplianceTransferableTokens(address,uint256,bool,bytes32)"
      | "getComplianceTransferableTokens(address,uint256,bool)"
      | "getComplianceTransferableTokens(address,uint256,address)"
      | "getComplianceTransferableTokens(address,uint256,address,bytes32)"
      | "getComplianceTransferableTokens(address,uint256,uint64)"
      | "getDSService"
      | "getEURetailInvestorsCount"
      | "getJPInvestorsCount"
      | "getTotalInvestorsCount"
      | "getUSAccreditedInvestorsCount"
      | "getUSInvestorsCount"
      | "getVersion"
      | "initialize"
      | "isOwner"
      | "newPreTransferCheck"
      | "owner"
      | "preInternalTransferCheck"
      | "preIssuanceCheck"
      | "preTransferCheck"
      | "renounceOwnership"
      | "setAccreditedInvestorsCount"
      | "setDSService"
      | "setEURetailInvestorsCount"
      | "setJPInvestorsCount"
      | "setTotalInvestorsCount"
      | "setUSAccreditedInvestorsCount"
      | "setUSInvestorsCount"
      | "transferOwnership"
      | "validateBurn"
      | "validateIssuance"
      | "validateIssuanceTime"
      | "validateIssuanceWithNoCompliance"
      | "validateSeize"
      | "validateTransfer(address,address,uint256)"
      | "validateTransfer(address,address,uint256,bool,uint256)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSServiceSet"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DS_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTITIONS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRY_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_EXCHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_TRANSFER_AGENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITIZE_SWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REALLOCATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNUSED_1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WALLET_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_REGISTRAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustInvestorCountsAfterCountryChange",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccreditedInvestorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool,bytes32)",
    values: [AddressLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool)",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address,bytes32)",
    values: [AddressLike, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComplianceTransferableTokens(address,uint256,uint64)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDSService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEURetailInvestorsCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJPInvestorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalInvestorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSAccreditedInvestorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSInvestorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newPreTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preInternalTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preIssuanceCheck",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preTransferCheck",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccreditedInvestorsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDSService",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEURetailInvestorsCount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setJPInvestorsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalInvestorsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSAccreditedInvestorsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSInvestorsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateBurn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuanceTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIssuanceWithNoCompliance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSeize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransfer(address,address,uint256,bool,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTITIONS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRY_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_EXCHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TRANSFER_AGENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITIZE_SWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REALLOCATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNUSED_1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_REGISTRAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustInvestorCountsAfterCountryChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccreditedInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComplianceTransferableTokens(address,uint256,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEURetailInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJPInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSAccreditedInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newPreTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preInternalTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preIssuanceCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preTransferCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccreditedInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEURetailInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJPInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSAccreditedInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSInvestorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuanceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIssuanceWithNoCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSeize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransfer(address,address,uint256,bool,uint256)",
    data: BytesLike
  ): Result;
}

export namespace DSServiceSetEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    serviceAddress: AddressLike
  ];
  export type OutputTuple = [serviceId: bigint, serviceAddress: string];
  export interface OutputObject {
    serviceId: bigint;
    serviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplianceServiceRegulatedPartitioned extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): ComplianceServiceRegulatedPartitioned;
  waitForDeployment(): Promise<this>;

  interface: ComplianceServiceRegulatedPartitionedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPLIANCE_CONFIGURATION_SERVICE: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN: TypedContractMethod<[], [bigint], "view">;

  LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER: TypedContractMethod<[], [bigint], "view">;

  PARTITIONS_MANAGER: TypedContractMethod<[], [bigint], "view">;

  REGISTRY_SERVICE: TypedContractMethod<[], [bigint], "view">;

  ROLE_EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ROLE_ISSUER: TypedContractMethod<[], [bigint], "view">;

  ROLE_MASTER: TypedContractMethod<[], [bigint], "view">;

  ROLE_NONE: TypedContractMethod<[], [bigint], "view">;

  ROLE_TRANSFER_AGENT: TypedContractMethod<[], [bigint], "view">;

  SECURITIZE_SWAP: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ISSUER: TypedContractMethod<[], [bigint], "view">;

  TOKEN_REALLOCATOR: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_RELAYER: TypedContractMethod<[], [bigint], "view">;

  TRUST_SERVICE: TypedContractMethod<[], [bigint], "view">;

  UNUSED_1: TypedContractMethod<[], [bigint], "view">;

  WALLET_MANAGER: TypedContractMethod<[], [bigint], "view">;

  WALLET_REGISTRAR: TypedContractMethod<[], [bigint], "view">;

  adjustInvestorCountsAfterCountryChange: TypedContractMethod<
    [_id: string, _country: string, arg2: string],
    [boolean],
    "nonpayable"
  >;

  checkWhitelisted: TypedContractMethod<[_who: AddressLike], [boolean], "view">;

  contractOwner: TypedContractMethod<[], [string], "view">;

  getAccreditedInvestorsCount: TypedContractMethod<[], [bigint], "view">;

  "getComplianceTransferableTokens(address,uint256,bool,bytes32)": TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _checkFlowback: boolean,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,bool)": TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _checkFlowback: boolean],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,address)": TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _to: AddressLike],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,address,bytes32)": TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _to: AddressLike,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;

  "getComplianceTransferableTokens(address,uint256,uint64)": TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _lockTime: BigNumberish],
    [bigint],
    "view"
  >;

  getDSService: TypedContractMethod<
    [_serviceId: BigNumberish],
    [string],
    "view"
  >;

  getEURetailInvestorsCount: TypedContractMethod<
    [_country: string],
    [bigint],
    "view"
  >;

  getJPInvestorsCount: TypedContractMethod<[], [bigint], "view">;

  getTotalInvestorsCount: TypedContractMethod<[], [bigint], "view">;

  getUSAccreditedInvestorsCount: TypedContractMethod<[], [bigint], "view">;

  getUSInvestorsCount: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isOwner: TypedContractMethod<[], [boolean], "view">;

  newPreTransferCheck: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _balanceFrom: BigNumberish,
      _paused: boolean
    ],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  preInternalTransferCheck: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  preIssuanceCheck: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  preTransferCheck: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAccreditedInvestorsCount: TypedContractMethod<
    [_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setDSService: TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setEURetailInvestorsCount: TypedContractMethod<
    [_country: string, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setJPInvestorsCount: TypedContractMethod<
    [_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setTotalInvestorsCount: TypedContractMethod<
    [_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setUSAccreditedInvestorsCount: TypedContractMethod<
    [_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setUSInvestorsCount: TypedContractMethod<
    [_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validateBurn: TypedContractMethod<
    [_who: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateIssuance: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateIssuanceTime: TypedContractMethod<
    [_issuanceTime: BigNumberish],
    [bigint],
    "view"
  >;

  validateIssuanceWithNoCompliance: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  validateSeize: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "validateTransfer(address,address,uint256)": TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "validateTransfer(address,address,uint256,bool,uint256)": TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _paused: boolean,
      _balanceFrom: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPLIANCE_CONFIGURATION_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PARTITIONS_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRY_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_MASTER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_TRANSFER_AGENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITIZE_SWAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_REALLOCATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_RELAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUST_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNUSED_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_REGISTRAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adjustInvestorCountsAfterCountryChange"
  ): TypedContractMethod<
    [_id: string, _country: string, arg2: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkWhitelisted"
  ): TypedContractMethod<[_who: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccreditedInvestorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,bool,bytes32)"
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _checkFlowback: boolean,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,bool)"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _checkFlowback: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,address)"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _to: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,address,bytes32)"
  ): TypedContractMethod<
    [
      _who: AddressLike,
      _time: BigNumberish,
      _to: AddressLike,
      _partition: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getComplianceTransferableTokens(address,uint256,uint64)"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _lockTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDSService"
  ): TypedContractMethod<[_serviceId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEURetailInvestorsCount"
  ): TypedContractMethod<[_country: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getJPInvestorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalInvestorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSAccreditedInvestorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSInvestorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "newPreTransferCheck"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _balanceFrom: BigNumberish,
      _paused: boolean
    ],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "preInternalTransferCheck"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "preIssuanceCheck"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "preTransferCheck"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [[bigint, string] & { code: bigint; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAccreditedInvestorsCount"
  ): TypedContractMethod<[_value: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setDSService"
  ): TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEURetailInvestorsCount"
  ): TypedContractMethod<
    [_country: string, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setJPInvestorsCount"
  ): TypedContractMethod<[_value: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalInvestorsCount"
  ): TypedContractMethod<[_value: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSAccreditedInvestorsCount"
  ): TypedContractMethod<[_value: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSInvestorsCount"
  ): TypedContractMethod<[_value: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateBurn"
  ): TypedContractMethod<
    [_who: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateIssuance"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateIssuanceTime"
  ): TypedContractMethod<[_issuanceTime: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "validateIssuanceWithNoCompliance"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _issuanceTime: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateSeize"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,uint256)"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateTransfer(address,address,uint256,bool,uint256)"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _value: BigNumberish,
      _paused: boolean,
      _balanceFrom: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "DSServiceSet"
  ): TypedContractEvent<
    DSServiceSetEvent.InputTuple,
    DSServiceSetEvent.OutputTuple,
    DSServiceSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DSServiceSet(uint256,address)": TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;
    DSServiceSet: TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
