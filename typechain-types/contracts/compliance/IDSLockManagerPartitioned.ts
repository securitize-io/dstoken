/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSLockManagerPartitionedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addManualLockRecord"
      | "createLockForHolder"
      | "createLockForInvestor"
      | "getTransferableTokens"
      | "getTransferableTokensForHolder"
      | "getTransferableTokensForInvestor"
      | "getVersion"
      | "lockCount"
      | "lockCountForHolder"
      | "lockCountForInvestor"
      | "lockInfo"
      | "lockInfoForHolder"
      | "lockInfoForInvestor"
      | "removeLockRecord"
      | "removeLockRecordForHolder"
      | "removeLockRecordForInvestor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HolderLockedPartition"
      | "HolderUnlockedPartition"
      | "Initialized"
      | "LockedPartition"
      | "UnlockedPartition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addManualLockRecord",
    values: [AddressLike, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockForHolder",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockForInvestor",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokens",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokensForHolder",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokensForInvestor",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockCount",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCountForHolder",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCountForInvestor",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfoForHolder",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfoForInvestor",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecord",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecordForHolder",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecordForInvestor",
    values: [string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addManualLockRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokensForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokensForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockCountForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCountForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockInfoForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockInfoForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecordForHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecordForInvestor",
    data: BytesLike
  ): Result;
}

export namespace HolderLockedPartitionEvent {
  export type InputTuple = [
    investorId: string,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish,
    partition: BytesLike
  ];
  export type OutputTuple = [
    investorId: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint,
    partition: string
  ];
  export interface OutputObject {
    investorId: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HolderUnlockedPartitionEvent {
  export type InputTuple = [
    investorId: string,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish,
    partition: BytesLike
  ];
  export type OutputTuple = [
    investorId: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint,
    partition: string
  ];
  export interface OutputObject {
    investorId: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedPartitionEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish,
    partition: BytesLike
  ];
  export type OutputTuple = [
    who: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint,
    partition: string
  ];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockedPartitionEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish,
    partition: BytesLike
  ];
  export type OutputTuple = [
    who: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint,
    partition: string
  ];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
    partition: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSLockManagerPartitioned extends BaseContract {
  connect(runner?: ContractRunner | null): IDSLockManagerPartitioned;
  waitForDeployment(): Promise<this>;

  interface: IDSLockManagerPartitionedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addManualLockRecord: TypedContractMethod<
    [
      _to: AddressLike,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createLockForHolder: TypedContractMethod<
    [
      _investorId: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createLockForInvestor: TypedContractMethod<
    [
      _investorId: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getTransferableTokens: TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _partition: BytesLike],
    [bigint],
    "view"
  >;

  getTransferableTokensForHolder: TypedContractMethod<
    [_holderId: string, _time: BigNumberish, _partition: BytesLike],
    [bigint],
    "view"
  >;

  getTransferableTokensForInvestor: TypedContractMethod<
    [_investorId: string, _time: BigNumberish, _partition: BytesLike],
    [bigint],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  lockCount: TypedContractMethod<
    [_who: AddressLike, _partition: BytesLike],
    [bigint],
    "view"
  >;

  lockCountForHolder: TypedContractMethod<
    [_holderId: string, _partition: BytesLike],
    [bigint],
    "view"
  >;

  lockCountForInvestor: TypedContractMethod<
    [_investorId: string, _partition: BytesLike],
    [bigint],
    "view"
  >;

  lockInfo: TypedContractMethod<
    [_who: AddressLike, _lockIndex: BigNumberish, _partition: BytesLike],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInfoForHolder: TypedContractMethod<
    [_holderId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInfoForInvestor: TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  removeLockRecord: TypedContractMethod<
    [_to: AddressLike, _lockIndex: BigNumberish, _partition: BytesLike],
    [boolean],
    "nonpayable"
  >;

  removeLockRecordForHolder: TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [boolean],
    "nonpayable"
  >;

  removeLockRecordForInvestor: TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addManualLockRecord"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLockForHolder"
  ): TypedContractMethod<
    [
      _investorId: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLockForInvestor"
  ): TypedContractMethod<
    [
      _investorId: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish,
      _partition: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokens"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokensForHolder"
  ): TypedContractMethod<
    [_holderId: string, _time: BigNumberish, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokensForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _time: BigNumberish, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "lockCount"
  ): TypedContractMethod<
    [_who: AddressLike, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockCountForHolder"
  ): TypedContractMethod<
    [_holderId: string, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockCountForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _partition: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInfo"
  ): TypedContractMethod<
    [_who: AddressLike, _lockIndex: BigNumberish, _partition: BytesLike],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInfoForHolder"
  ): TypedContractMethod<
    [_holderId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInfoForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLockRecord"
  ): TypedContractMethod<
    [_to: AddressLike, _lockIndex: BigNumberish, _partition: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLockRecordForHolder"
  ): TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLockRecordForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish, _partition: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "HolderLockedPartition"
  ): TypedContractEvent<
    HolderLockedPartitionEvent.InputTuple,
    HolderLockedPartitionEvent.OutputTuple,
    HolderLockedPartitionEvent.OutputObject
  >;
  getEvent(
    key: "HolderUnlockedPartition"
  ): TypedContractEvent<
    HolderUnlockedPartitionEvent.InputTuple,
    HolderUnlockedPartitionEvent.OutputTuple,
    HolderUnlockedPartitionEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LockedPartition"
  ): TypedContractEvent<
    LockedPartitionEvent.InputTuple,
    LockedPartitionEvent.OutputTuple,
    LockedPartitionEvent.OutputObject
  >;
  getEvent(
    key: "UnlockedPartition"
  ): TypedContractEvent<
    UnlockedPartitionEvent.InputTuple,
    UnlockedPartitionEvent.OutputTuple,
    UnlockedPartitionEvent.OutputObject
  >;

  filters: {
    "HolderLockedPartition(string,uint256,uint256,string,uint256,bytes32)": TypedContractEvent<
      HolderLockedPartitionEvent.InputTuple,
      HolderLockedPartitionEvent.OutputTuple,
      HolderLockedPartitionEvent.OutputObject
    >;
    HolderLockedPartition: TypedContractEvent<
      HolderLockedPartitionEvent.InputTuple,
      HolderLockedPartitionEvent.OutputTuple,
      HolderLockedPartitionEvent.OutputObject
    >;

    "HolderUnlockedPartition(string,uint256,uint256,string,uint256,bytes32)": TypedContractEvent<
      HolderUnlockedPartitionEvent.InputTuple,
      HolderUnlockedPartitionEvent.OutputTuple,
      HolderUnlockedPartitionEvent.OutputObject
    >;
    HolderUnlockedPartition: TypedContractEvent<
      HolderUnlockedPartitionEvent.InputTuple,
      HolderUnlockedPartitionEvent.OutputTuple,
      HolderUnlockedPartitionEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LockedPartition(address,uint256,uint256,string,uint256,bytes32)": TypedContractEvent<
      LockedPartitionEvent.InputTuple,
      LockedPartitionEvent.OutputTuple,
      LockedPartitionEvent.OutputObject
    >;
    LockedPartition: TypedContractEvent<
      LockedPartitionEvent.InputTuple,
      LockedPartitionEvent.OutputTuple,
      LockedPartitionEvent.OutputObject
    >;

    "UnlockedPartition(address,uint256,uint256,string,uint256,bytes32)": TypedContractEvent<
      UnlockedPartitionEvent.InputTuple,
      UnlockedPartitionEvent.OutputTuple,
      UnlockedPartitionEvent.OutputObject
    >;
    UnlockedPartition: TypedContractEvent<
      UnlockedPartitionEvent.InputTuple,
      UnlockedPartitionEvent.OutputTuple,
      UnlockedPartitionEvent.OutputObject
    >;
  };
}
