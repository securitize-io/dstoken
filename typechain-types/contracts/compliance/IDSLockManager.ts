/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSLockManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addManualLockRecord"
      | "createLockForInvestor"
      | "getTransferableTokens"
      | "getTransferableTokensForInvestor"
      | "getVersion"
      | "initialize"
      | "isInvestorLocked"
      | "lockCount"
      | "lockCountForInvestor"
      | "lockInfo"
      | "lockInfoForInvestor"
      | "lockInvestor"
      | "removeLockRecord"
      | "removeLockRecordForInvestor"
      | "unlockInvestor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HolderLocked"
      | "HolderUnlocked"
      | "Initialized"
      | "Locked"
      | "Unlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addManualLockRecord",
    values: [AddressLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockForInvestor",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableTokensForInvestor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInvestorLocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCountForInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfoForInvestor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInvestor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecord",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLockRecordForInvestor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockInvestor",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addManualLockRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableTokensForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInvestorLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockCountForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockInfoForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLockRecordForInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockInvestor",
    data: BytesLike
  ): Result;
}

export namespace HolderLockedEvent {
  export type InputTuple = [
    holderId: string,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    holderId: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    holderId: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HolderUnlockedEvent {
  export type InputTuple = [
    holderId: string,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    holderId: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    holderId: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockedEvent {
  export type InputTuple = [
    who: AddressLike,
    value: BigNumberish,
    reason: BigNumberish,
    reasonString: string,
    releaseTime: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    value: bigint,
    reason: bigint,
    reasonString: string,
    releaseTime: bigint
  ];
  export interface OutputObject {
    who: string;
    value: bigint;
    reason: bigint;
    reasonString: string;
    releaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSLockManager extends BaseContract {
  connect(runner?: ContractRunner | null): IDSLockManager;
  waitForDeployment(): Promise<this>;

  interface: IDSLockManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addManualLockRecord: TypedContractMethod<
    [
      _to: AddressLike,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createLockForInvestor: TypedContractMethod<
    [
      _investor: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getTransferableTokens: TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish],
    [bigint],
    "view"
  >;

  getTransferableTokensForInvestor: TypedContractMethod<
    [_investorId: string, _time: BigNumberish],
    [bigint],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isInvestorLocked: TypedContractMethod<
    [_investorId: string],
    [boolean],
    "view"
  >;

  lockCount: TypedContractMethod<[_who: AddressLike], [bigint], "view">;

  lockCountForInvestor: TypedContractMethod<
    [_investorId: string],
    [bigint],
    "view"
  >;

  lockInfo: TypedContractMethod<
    [_who: AddressLike, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInfoForInvestor: TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;

  lockInvestor: TypedContractMethod<
    [_investorId: string],
    [boolean],
    "nonpayable"
  >;

  removeLockRecord: TypedContractMethod<
    [_to: AddressLike, _lockIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  removeLockRecordForInvestor: TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unlockInvestor: TypedContractMethod<
    [_investorId: string],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addManualLockRecord"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _valueLocked: BigNumberish,
      _reason: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLockForInvestor"
  ): TypedContractMethod<
    [
      _investor: string,
      _valueLocked: BigNumberish,
      _reasonCode: BigNumberish,
      _reasonString: string,
      _releaseTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokens"
  ): TypedContractMethod<
    [_who: AddressLike, _time: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransferableTokensForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _time: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInvestorLocked"
  ): TypedContractMethod<[_investorId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockCount"
  ): TypedContractMethod<[_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockCountForInvestor"
  ): TypedContractMethod<[_investorId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockInfo"
  ): TypedContractMethod<
    [_who: AddressLike, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInfoForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        reasonCode: bigint;
        reasonString: string;
        value: bigint;
        autoReleaseTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockInvestor"
  ): TypedContractMethod<[_investorId: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "removeLockRecord"
  ): TypedContractMethod<
    [_to: AddressLike, _lockIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLockRecordForInvestor"
  ): TypedContractMethod<
    [_investorId: string, _lockIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockInvestor"
  ): TypedContractMethod<[_investorId: string], [boolean], "nonpayable">;

  getEvent(
    key: "HolderLocked"
  ): TypedContractEvent<
    HolderLockedEvent.InputTuple,
    HolderLockedEvent.OutputTuple,
    HolderLockedEvent.OutputObject
  >;
  getEvent(
    key: "HolderUnlocked"
  ): TypedContractEvent<
    HolderUnlockedEvent.InputTuple,
    HolderUnlockedEvent.OutputTuple,
    HolderUnlockedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Locked"
  ): TypedContractEvent<
    LockedEvent.InputTuple,
    LockedEvent.OutputTuple,
    LockedEvent.OutputObject
  >;
  getEvent(
    key: "Unlocked"
  ): TypedContractEvent<
    UnlockedEvent.InputTuple,
    UnlockedEvent.OutputTuple,
    UnlockedEvent.OutputObject
  >;

  filters: {
    "HolderLocked(string,uint256,uint256,string,uint256)": TypedContractEvent<
      HolderLockedEvent.InputTuple,
      HolderLockedEvent.OutputTuple,
      HolderLockedEvent.OutputObject
    >;
    HolderLocked: TypedContractEvent<
      HolderLockedEvent.InputTuple,
      HolderLockedEvent.OutputTuple,
      HolderLockedEvent.OutputObject
    >;

    "HolderUnlocked(string,uint256,uint256,string,uint256)": TypedContractEvent<
      HolderUnlockedEvent.InputTuple,
      HolderUnlockedEvent.OutputTuple,
      HolderUnlockedEvent.OutputObject
    >;
    HolderUnlocked: TypedContractEvent<
      HolderUnlockedEvent.InputTuple,
      HolderUnlockedEvent.OutputTuple,
      HolderUnlockedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Locked(address,uint256,uint256,string,uint256)": TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;
    Locked: TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;

    "Unlocked(address,uint256,uint256,string,uint256)": TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
    Unlocked: TypedContractEvent<
      UnlockedEvent.InputTuple,
      UnlockedEvent.OutputTuple,
      UnlockedEvent.OutputObject
    >;
  };
}
