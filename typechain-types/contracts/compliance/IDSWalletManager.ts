/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDSWalletManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXCHANGE"
      | "ISSUER"
      | "NONE"
      | "PLATFORM"
      | "addExchangeWallet"
      | "addIssuerWallet"
      | "addIssuerWallets"
      | "addPlatformWallet"
      | "addPlatformWallets"
      | "getVersion"
      | "getWalletType"
      | "initialize"
      | "isIssuerSpecialWallet"
      | "isPlatformWallet"
      | "isSpecialWallet"
      | "removeSpecialWallet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSWalletManagerReservedSlotsSet"
      | "DSWalletManagerSpecialWalletAdded"
      | "DSWalletManagerSpecialWalletRemoved"
      | "Initialized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "EXCHANGE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ISSUER", values?: undefined): string;
  encodeFunctionData(functionFragment: "NONE", values?: undefined): string;
  encodeFunctionData(functionFragment: "PLATFORM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addExchangeWallet",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuerWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuerWallets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlatformWallets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuerSpecialWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlatformWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSpecialWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSpecialWallet",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "EXCHANGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ISSUER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NONE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PLATFORM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addExchangeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIssuerWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIssuerWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlatformWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIssuerSpecialWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSpecialWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSpecialWallet",
    data: BytesLike
  ): Result;
}

export namespace DSWalletManagerReservedSlotsSetEvent {
  export type InputTuple = [
    wallet: AddressLike,
    country: string,
    accreditationStatus: BigNumberish,
    slots: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    country: string,
    accreditationStatus: bigint,
    slots: bigint,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    country: string;
    accreditationStatus: bigint;
    slots: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSWalletManagerSpecialWalletAddedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    walletType: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    walletType: bigint,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    walletType: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSWalletManagerSpecialWalletRemovedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    walletType: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wallet: string,
    walletType: bigint,
    sender: string
  ];
  export interface OutputObject {
    wallet: string;
    walletType: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDSWalletManager extends BaseContract {
  connect(runner?: ContractRunner | null): IDSWalletManager;
  waitForDeployment(): Promise<this>;

  interface: IDSWalletManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ISSUER: TypedContractMethod<[], [bigint], "view">;

  NONE: TypedContractMethod<[], [bigint], "view">;

  PLATFORM: TypedContractMethod<[], [bigint], "view">;

  addExchangeWallet: TypedContractMethod<
    [_wallet: AddressLike, _owner: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addIssuerWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addIssuerWallets: TypedContractMethod<
    [_wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  addPlatformWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addPlatformWallets: TypedContractMethod<
    [_wallets: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  getWalletType: TypedContractMethod<[_wallet: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isIssuerSpecialWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  isPlatformWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  isSpecialWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "view"
  >;

  removeSpecialWallet: TypedContractMethod<
    [_wallet: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addExchangeWallet"
  ): TypedContractMethod<
    [_wallet: AddressLike, _owner: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addIssuerWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "addIssuerWallets"
  ): TypedContractMethod<[_wallets: AddressLike[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "addPlatformWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "addPlatformWallets"
  ): TypedContractMethod<[_wallets: AddressLike[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWalletType"
  ): TypedContractMethod<[_wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isIssuerSpecialWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPlatformWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpecialWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeSpecialWallet"
  ): TypedContractMethod<[_wallet: AddressLike], [boolean], "nonpayable">;

  getEvent(
    key: "DSWalletManagerReservedSlotsSet"
  ): TypedContractEvent<
    DSWalletManagerReservedSlotsSetEvent.InputTuple,
    DSWalletManagerReservedSlotsSetEvent.OutputTuple,
    DSWalletManagerReservedSlotsSetEvent.OutputObject
  >;
  getEvent(
    key: "DSWalletManagerSpecialWalletAdded"
  ): TypedContractEvent<
    DSWalletManagerSpecialWalletAddedEvent.InputTuple,
    DSWalletManagerSpecialWalletAddedEvent.OutputTuple,
    DSWalletManagerSpecialWalletAddedEvent.OutputObject
  >;
  getEvent(
    key: "DSWalletManagerSpecialWalletRemoved"
  ): TypedContractEvent<
    DSWalletManagerSpecialWalletRemovedEvent.InputTuple,
    DSWalletManagerSpecialWalletRemovedEvent.OutputTuple,
    DSWalletManagerSpecialWalletRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "DSWalletManagerReservedSlotsSet(address,string,uint8,uint256,address)": TypedContractEvent<
      DSWalletManagerReservedSlotsSetEvent.InputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputObject
    >;
    DSWalletManagerReservedSlotsSet: TypedContractEvent<
      DSWalletManagerReservedSlotsSetEvent.InputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputTuple,
      DSWalletManagerReservedSlotsSetEvent.OutputObject
    >;

    "DSWalletManagerSpecialWalletAdded(address,uint8,address)": TypedContractEvent<
      DSWalletManagerSpecialWalletAddedEvent.InputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputObject
    >;
    DSWalletManagerSpecialWalletAdded: TypedContractEvent<
      DSWalletManagerSpecialWalletAddedEvent.InputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputTuple,
      DSWalletManagerSpecialWalletAddedEvent.OutputObject
    >;

    "DSWalletManagerSpecialWalletRemoved(address,uint8,address)": TypedContractEvent<
      DSWalletManagerSpecialWalletRemovedEvent.InputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputObject
    >;
    DSWalletManagerSpecialWalletRemoved: TypedContractEvent<
      DSWalletManagerSpecialWalletRemovedEvent.InputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputTuple,
      DSWalletManagerSpecialWalletRemovedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
