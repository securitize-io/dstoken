/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ComplianceConfigurationServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMPLIANCE_CONFIGURATION_SERVICE"
      | "COMPLIANCE_SERVICE"
      | "DS_TOKEN"
      | "LOCK_MANAGER"
      | "OMNIBUS_TBE_CONTROLLER"
      | "PARTITIONS_MANAGER"
      | "REGISTRY_SERVICE"
      | "ROLE_EXCHANGE"
      | "ROLE_ISSUER"
      | "ROLE_MASTER"
      | "ROLE_NONE"
      | "ROLE_TRANSFER_AGENT"
      | "SECURITIZE_SWAP"
      | "TOKEN_ISSUER"
      | "TOKEN_REALLOCATOR"
      | "TRANSACTION_RELAYER"
      | "TRUST_SERVICE"
      | "UNUSED_1"
      | "WALLET_MANAGER"
      | "WALLET_REGISTRAR"
      | "authorizedSecurities"
      | "blockFlowbackEndTime"
      | "contractOwner"
      | "countriesCompliances"
      | "disallowBackDating"
      | "euRetailInvestorsLimit"
      | "forceAccredited"
      | "forceAccreditedUS"
      | "forceFullTransfer"
      | "getAll"
      | "getAuthorizedSecurities"
      | "getBlockFlowbackEndTime"
      | "getCountryCompliance"
      | "getDSService"
      | "getDisallowBackDating"
      | "getEURetailInvestorsLimit"
      | "getForceAccredited"
      | "getForceAccreditedUS"
      | "getForceFullTransfer"
      | "getJPInvestorsLimit"
      | "getMaxUSInvestorsPercentage"
      | "getMaximumHoldingsPerInvestor"
      | "getMinEUTokens"
      | "getMinUSTokens"
      | "getMinimumHoldingsPerInvestor"
      | "getMinimumTotalInvestors"
      | "getNonAccreditedInvestorsLimit"
      | "getNonUSLockPeriod"
      | "getTotalInvestorsLimit"
      | "getUSAccreditedInvestorsLimit"
      | "getUSInvestorsLimit"
      | "getUSLockPeriod"
      | "getVersion"
      | "getWorldWideForceFullTransfer"
      | "initialize"
      | "isOwner"
      | "jpInvestorsLimit"
      | "maxUSInvestorsPercentage"
      | "maximumHoldingsPerInvestor"
      | "minEUTokens"
      | "minUSTokens"
      | "minimumHoldingsPerInvestor"
      | "minimumTotalInvestors"
      | "nonAccreditedInvestorsLimit"
      | "nonUSLockPeriod"
      | "owner"
      | "renounceOwnership"
      | "setAll"
      | "setAuthorizedSecurities"
      | "setBlockFlowbackEndTime"
      | "setCountriesCompliance"
      | "setCountryCompliance"
      | "setDSService"
      | "setDisallowBackDating"
      | "setEURetailInvestorsLimit"
      | "setForceAccredited"
      | "setForceAccreditedUS"
      | "setForceFullTransfer"
      | "setJPInvestorsLimit"
      | "setMaxUSInvestorsPercentage"
      | "setMaximumHoldingsPerInvestor"
      | "setMinEUTokens"
      | "setMinUSTokens"
      | "setMinimumHoldingsPerInvestor"
      | "setMinimumTotalInvestors"
      | "setNonAccreditedInvestorsLimit"
      | "setNonUSLockPeriod"
      | "setTotalInvestorsLimit"
      | "setUSAccreditedInvestorsLimit"
      | "setUSInvestorsLimit"
      | "setUSLockPeriod"
      | "setWorldWideForceFullTransfer"
      | "totalInvestorsLimit"
      | "transferOwnership"
      | "usAccreditedInvestorsLimit"
      | "usInvestorsLimit"
      | "usLockPeriod"
      | "worldWideForceFullTransfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSComplianceBoolRuleSet"
      | "DSComplianceStringToUIntMapRuleSet"
      | "DSComplianceUIntRuleSet"
      | "DSServiceSet"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPLIANCE_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DS_TOKEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PARTITIONS_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRY_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_EXCHANGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_TRANSFER_AGENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECURITIZE_SWAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_ISSUER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REALLOCATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSACTION_RELAYER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SERVICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNUSED_1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WALLET_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WALLET_REGISTRAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedSecurities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockFlowbackEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countriesCompliances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowBackDating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "euRetailInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAccredited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceAccreditedUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceFullTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSecurities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockFlowbackEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCountryCompliance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDSService",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisallowBackDating",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEURetailInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForceAccredited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForceAccreditedUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForceFullTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJPInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxUSInvestorsPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinEUTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinUSTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumTotalInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonUSLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldWideForceFullTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "jpInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxUSInvestorsPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minEUTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minUSTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumHoldingsPerInvestor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTotalInvestors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonUSLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAll",
    values: [BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedSecurities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockFlowbackEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountriesCompliance",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCountryCompliance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDSService",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisallowBackDating",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEURetailInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceAccredited",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceAccreditedUS",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForceFullTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setJPInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxUSInvestorsPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumHoldingsPerInvestor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinEUTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUSTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumHoldingsPerInvestor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumTotalInvestors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonAccreditedInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNonUSLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSAccreditedInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSInvestorsLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldWideForceFullTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usAccreditedInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usInvestorsLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldWideForceFullTransfer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMPLIANCE_CONFIGURATION_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPLIANCE_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DS_TOKEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OMNIBUS_TBE_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PARTITIONS_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRY_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_EXCHANGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_TRANSFER_AGENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECURITIZE_SWAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_ISSUER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REALLOCATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSACTION_RELAYER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SERVICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNUSED_1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WALLET_REGISTRAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedSecurities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockFlowbackEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countriesCompliances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowBackDating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "euRetailInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAccredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceAccreditedUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSecurities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockFlowbackEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountryCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisallowBackDating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEURetailInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceAccredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceAccreditedUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJPInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxUSInvestorsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinEUTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinUSTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumTotalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNonUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldWideForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jpInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUSInvestorsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minEUTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minUSTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTotalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedSecurities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockFlowbackEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCountriesCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCountryCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDSService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisallowBackDating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEURetailInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceAccredited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceAccreditedUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJPInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxUSInvestorsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinEUTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUSTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumHoldingsPerInvestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumTotalInvestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNonUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldWideForceFullTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usAccreditedInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usInvestorsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldWideForceFullTransfer",
    data: BytesLike
  ): Result;
}

export namespace DSComplianceBoolRuleSetEvent {
  export type InputTuple = [
    ruleName: string,
    prevValue: boolean,
    newValue: boolean
  ];
  export type OutputTuple = [
    ruleName: string,
    prevValue: boolean,
    newValue: boolean
  ];
  export interface OutputObject {
    ruleName: string;
    prevValue: boolean;
    newValue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSComplianceStringToUIntMapRuleSetEvent {
  export type InputTuple = [
    ruleName: string,
    keyValue: string,
    prevValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [
    ruleName: string,
    keyValue: string,
    prevValue: bigint,
    newValue: bigint
  ];
  export interface OutputObject {
    ruleName: string;
    keyValue: string;
    prevValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSComplianceUIntRuleSetEvent {
  export type InputTuple = [
    ruleName: string,
    prevValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [
    ruleName: string,
    prevValue: bigint,
    newValue: bigint
  ];
  export interface OutputObject {
    ruleName: string;
    prevValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSServiceSetEvent {
  export type InputTuple = [
    serviceId: BigNumberish,
    serviceAddress: AddressLike
  ];
  export type OutputTuple = [serviceId: bigint, serviceAddress: string];
  export interface OutputObject {
    serviceId: bigint;
    serviceAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplianceConfigurationService extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceConfigurationService;
  waitForDeployment(): Promise<this>;

  interface: ComplianceConfigurationServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMPLIANCE_CONFIGURATION_SERVICE: TypedContractMethod<[], [bigint], "view">;

  COMPLIANCE_SERVICE: TypedContractMethod<[], [bigint], "view">;

  DS_TOKEN: TypedContractMethod<[], [bigint], "view">;

  LOCK_MANAGER: TypedContractMethod<[], [bigint], "view">;

  OMNIBUS_TBE_CONTROLLER: TypedContractMethod<[], [bigint], "view">;

  PARTITIONS_MANAGER: TypedContractMethod<[], [bigint], "view">;

  REGISTRY_SERVICE: TypedContractMethod<[], [bigint], "view">;

  ROLE_EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ROLE_ISSUER: TypedContractMethod<[], [bigint], "view">;

  ROLE_MASTER: TypedContractMethod<[], [bigint], "view">;

  ROLE_NONE: TypedContractMethod<[], [bigint], "view">;

  ROLE_TRANSFER_AGENT: TypedContractMethod<[], [bigint], "view">;

  SECURITIZE_SWAP: TypedContractMethod<[], [bigint], "view">;

  TOKEN_ISSUER: TypedContractMethod<[], [bigint], "view">;

  TOKEN_REALLOCATOR: TypedContractMethod<[], [bigint], "view">;

  TRANSACTION_RELAYER: TypedContractMethod<[], [bigint], "view">;

  TRUST_SERVICE: TypedContractMethod<[], [bigint], "view">;

  UNUSED_1: TypedContractMethod<[], [bigint], "view">;

  WALLET_MANAGER: TypedContractMethod<[], [bigint], "view">;

  WALLET_REGISTRAR: TypedContractMethod<[], [bigint], "view">;

  authorizedSecurities: TypedContractMethod<[], [bigint], "view">;

  blockFlowbackEndTime: TypedContractMethod<[], [bigint], "view">;

  contractOwner: TypedContractMethod<[], [string], "view">;

  countriesCompliances: TypedContractMethod<[arg0: string], [bigint], "view">;

  disallowBackDating: TypedContractMethod<[], [boolean], "view">;

  euRetailInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  forceAccredited: TypedContractMethod<[], [boolean], "view">;

  forceAccreditedUS: TypedContractMethod<[], [boolean], "view">;

  forceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  getAll: TypedContractMethod<[], [[bigint[], boolean[]]], "view">;

  getAuthorizedSecurities: TypedContractMethod<[], [bigint], "view">;

  getBlockFlowbackEndTime: TypedContractMethod<[], [bigint], "view">;

  getCountryCompliance: TypedContractMethod<
    [_country: string],
    [bigint],
    "view"
  >;

  getDSService: TypedContractMethod<
    [_serviceId: BigNumberish],
    [string],
    "view"
  >;

  getDisallowBackDating: TypedContractMethod<[], [boolean], "view">;

  getEURetailInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getForceAccredited: TypedContractMethod<[], [boolean], "view">;

  getForceAccreditedUS: TypedContractMethod<[], [boolean], "view">;

  getForceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  getJPInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getMaxUSInvestorsPercentage: TypedContractMethod<[], [bigint], "view">;

  getMaximumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  getMinEUTokens: TypedContractMethod<[], [bigint], "view">;

  getMinUSTokens: TypedContractMethod<[], [bigint], "view">;

  getMinimumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  getMinimumTotalInvestors: TypedContractMethod<[], [bigint], "view">;

  getNonAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getNonUSLockPeriod: TypedContractMethod<[], [bigint], "view">;

  getTotalInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getUSAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getUSInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  getUSLockPeriod: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  getWorldWideForceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isOwner: TypedContractMethod<[], [boolean], "view">;

  jpInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  maxUSInvestorsPercentage: TypedContractMethod<[], [bigint], "view">;

  maximumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  minEUTokens: TypedContractMethod<[], [bigint], "view">;

  minUSTokens: TypedContractMethod<[], [bigint], "view">;

  minimumHoldingsPerInvestor: TypedContractMethod<[], [bigint], "view">;

  minimumTotalInvestors: TypedContractMethod<[], [bigint], "view">;

  nonAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  nonUSLockPeriod: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAll: TypedContractMethod<
    [_uint_values: BigNumberish[], _bool_values: boolean[]],
    [void],
    "nonpayable"
  >;

  setAuthorizedSecurities: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBlockFlowbackEndTime: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCountriesCompliance: TypedContractMethod<
    [_countries: string[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setCountryCompliance: TypedContractMethod<
    [_country: string, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDSService: TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setDisallowBackDating: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setEURetailInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setForceAccredited: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setForceAccreditedUS: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setForceFullTransfer: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  setJPInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxUSInvestorsPercentage: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaximumHoldingsPerInvestor: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinEUTokens: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinUSTokens: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumHoldingsPerInvestor: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumTotalInvestors: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNonAccreditedInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNonUSLockPeriod: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSAccreditedInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSInvestorsLimit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUSLockPeriod: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWorldWideForceFullTransfer: TypedContractMethod<
    [_value: boolean],
    [void],
    "nonpayable"
  >;

  totalInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usAccreditedInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  usInvestorsLimit: TypedContractMethod<[], [bigint], "view">;

  usLockPeriod: TypedContractMethod<[], [bigint], "view">;

  worldWideForceFullTransfer: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMPLIANCE_CONFIGURATION_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COMPLIANCE_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DS_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OMNIBUS_TBE_CONTROLLER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PARTITIONS_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRY_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_MASTER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_TRANSFER_AGENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECURITIZE_SWAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_REALLOCATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSACTION_RELAYER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRUST_SERVICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNUSED_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_MANAGER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WALLET_REGISTRAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizedSecurities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockFlowbackEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "countriesCompliances"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "disallowBackDating"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "euRetailInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forceAccredited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "forceAccreditedUS"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "forceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAll"
  ): TypedContractMethod<[], [[bigint[], boolean[]]], "view">;
  getFunction(
    nameOrSignature: "getAuthorizedSecurities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockFlowbackEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCountryCompliance"
  ): TypedContractMethod<[_country: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDSService"
  ): TypedContractMethod<[_serviceId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDisallowBackDating"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getEURetailInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getForceAccredited"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getForceAccreditedUS"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getForceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getJPInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxUSInvestorsPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaximumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinEUTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinUSTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumTotalInvestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonUSLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUSLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getWorldWideForceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "jpInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxUSInvestorsPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minEUTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minUSTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumHoldingsPerInvestor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumTotalInvestors"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonUSLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAll"
  ): TypedContractMethod<
    [_uint_values: BigNumberish[], _bool_values: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedSecurities"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBlockFlowbackEndTime"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCountriesCompliance"
  ): TypedContractMethod<
    [_countries: string[], _values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCountryCompliance"
  ): TypedContractMethod<
    [_country: string, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDSService"
  ): TypedContractMethod<
    [_serviceId: BigNumberish, _address: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDisallowBackDating"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEURetailInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForceAccredited"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForceAccreditedUS"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setForceFullTransfer"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setJPInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxUSInvestorsPercentage"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaximumHoldingsPerInvestor"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinEUTokens"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinUSTokens"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumHoldingsPerInvestor"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinimumTotalInvestors"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNonAccreditedInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNonUSLockPeriod"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSAccreditedInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSInvestorsLimit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSLockPeriod"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWorldWideForceFullTransfer"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usAccreditedInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usInvestorsLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usLockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "worldWideForceFullTransfer"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "DSComplianceBoolRuleSet"
  ): TypedContractEvent<
    DSComplianceBoolRuleSetEvent.InputTuple,
    DSComplianceBoolRuleSetEvent.OutputTuple,
    DSComplianceBoolRuleSetEvent.OutputObject
  >;
  getEvent(
    key: "DSComplianceStringToUIntMapRuleSet"
  ): TypedContractEvent<
    DSComplianceStringToUIntMapRuleSetEvent.InputTuple,
    DSComplianceStringToUIntMapRuleSetEvent.OutputTuple,
    DSComplianceStringToUIntMapRuleSetEvent.OutputObject
  >;
  getEvent(
    key: "DSComplianceUIntRuleSet"
  ): TypedContractEvent<
    DSComplianceUIntRuleSetEvent.InputTuple,
    DSComplianceUIntRuleSetEvent.OutputTuple,
    DSComplianceUIntRuleSetEvent.OutputObject
  >;
  getEvent(
    key: "DSServiceSet"
  ): TypedContractEvent<
    DSServiceSetEvent.InputTuple,
    DSServiceSetEvent.OutputTuple,
    DSServiceSetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "DSComplianceBoolRuleSet(string,bool,bool)": TypedContractEvent<
      DSComplianceBoolRuleSetEvent.InputTuple,
      DSComplianceBoolRuleSetEvent.OutputTuple,
      DSComplianceBoolRuleSetEvent.OutputObject
    >;
    DSComplianceBoolRuleSet: TypedContractEvent<
      DSComplianceBoolRuleSetEvent.InputTuple,
      DSComplianceBoolRuleSetEvent.OutputTuple,
      DSComplianceBoolRuleSetEvent.OutputObject
    >;

    "DSComplianceStringToUIntMapRuleSet(string,string,uint256,uint256)": TypedContractEvent<
      DSComplianceStringToUIntMapRuleSetEvent.InputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputObject
    >;
    DSComplianceStringToUIntMapRuleSet: TypedContractEvent<
      DSComplianceStringToUIntMapRuleSetEvent.InputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputTuple,
      DSComplianceStringToUIntMapRuleSetEvent.OutputObject
    >;

    "DSComplianceUIntRuleSet(string,uint256,uint256)": TypedContractEvent<
      DSComplianceUIntRuleSetEvent.InputTuple,
      DSComplianceUIntRuleSetEvent.OutputTuple,
      DSComplianceUIntRuleSetEvent.OutputObject
    >;
    DSComplianceUIntRuleSet: TypedContractEvent<
      DSComplianceUIntRuleSetEvent.InputTuple,
      DSComplianceUIntRuleSetEvent.OutputTuple,
      DSComplianceUIntRuleSetEvent.OutputObject
    >;

    "DSServiceSet(uint256,address)": TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;
    DSServiceSet: TypedContractEvent<
      DSServiceSetEvent.InputTuple,
      DSServiceSetEvent.OutputTuple,
      DSServiceSetEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
