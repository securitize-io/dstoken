/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TrustServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXCHANGE"
      | "ISSUER"
      | "MASTER"
      | "NONE"
      | "TRANSFER_AGENT"
      | "addEntity"
      | "addOperator"
      | "addResource"
      | "changeEntityOwner"
      | "getEntityByOperator"
      | "getEntityByOwner"
      | "getEntityByResource"
      | "getRole"
      | "getVersion"
      | "initialize"
      | "isResourceOperator"
      | "isResourceOwner"
      | "removeOperator"
      | "removeResource"
      | "removeRole"
      | "setRole"
      | "setRoles"
      | "setServiceOwner"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DSTrustServiceRoleAdded"
      | "DSTrustServiceRoleRemoved"
      | "Initialized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "EXCHANGE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ISSUER", values?: undefined): string;
  encodeFunctionData(functionFragment: "MASTER", values?: undefined): string;
  encodeFunctionData(functionFragment: "NONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_AGENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEntity",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addOperator",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addResource",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeEntityOwner",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityByOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityByResource",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isResourceOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isResourceOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeResource",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoles",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceOwner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "EXCHANGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ISSUER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MASTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_AGENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEntity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeEntityOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityByOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityByResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isResourceOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResourceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setServiceOwner",
    data: BytesLike
  ): Result;
}

export namespace DSTrustServiceRoleAddedEvent {
  export type InputTuple = [
    targetAddress: AddressLike,
    role: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    targetAddress: string,
    role: bigint,
    sender: string
  ];
  export interface OutputObject {
    targetAddress: string;
    role: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DSTrustServiceRoleRemovedEvent {
  export type InputTuple = [
    targetAddress: AddressLike,
    role: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    targetAddress: string,
    role: bigint,
    sender: string
  ];
  export interface OutputObject {
    targetAddress: string;
    role: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustService extends BaseContract {
  connect(runner?: ContractRunner | null): TrustService;
  waitForDeployment(): Promise<this>;

  interface: TrustServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXCHANGE: TypedContractMethod<[], [bigint], "view">;

  ISSUER: TypedContractMethod<[], [bigint], "view">;

  MASTER: TypedContractMethod<[], [bigint], "view">;

  NONE: TypedContractMethod<[], [bigint], "view">;

  TRANSFER_AGENT: TypedContractMethod<[], [bigint], "view">;

  addEntity: TypedContractMethod<
    [_name: string, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  addOperator: TypedContractMethod<
    [_name: string, _operator: AddressLike],
    [void],
    "nonpayable"
  >;

  addResource: TypedContractMethod<
    [_name: string, _resource: AddressLike],
    [void],
    "nonpayable"
  >;

  changeEntityOwner: TypedContractMethod<
    [_name: string, _oldOwner: AddressLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEntityByOperator: TypedContractMethod<
    [_operator: AddressLike],
    [string],
    "view"
  >;

  getEntityByOwner: TypedContractMethod<
    [_owner: AddressLike],
    [string],
    "view"
  >;

  getEntityByResource: TypedContractMethod<
    [_resource: AddressLike],
    [string],
    "view"
  >;

  getRole: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  getVersion: TypedContractMethod<[], [bigint[]], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isResourceOperator: TypedContractMethod<
    [_resource: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  isResourceOwner: TypedContractMethod<
    [_resource: AddressLike, _owner: AddressLike],
    [boolean],
    "view"
  >;

  removeOperator: TypedContractMethod<
    [_name: string, _operator: AddressLike],
    [void],
    "nonpayable"
  >;

  removeResource: TypedContractMethod<
    [_name: string, _resource: AddressLike],
    [void],
    "nonpayable"
  >;

  removeRole: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  setRole: TypedContractMethod<
    [_address: AddressLike, _role: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setRoles: TypedContractMethod<
    [_addresses: AddressLike[], _roles: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;

  setServiceOwner: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXCHANGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ISSUER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MASTER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NONE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSFER_AGENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addEntity"
  ): TypedContractMethod<
    [_name: string, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOperator"
  ): TypedContractMethod<
    [_name: string, _operator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addResource"
  ): TypedContractMethod<
    [_name: string, _resource: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeEntityOwner"
  ): TypedContractMethod<
    [_name: string, _oldOwner: AddressLike, _newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEntityByOperator"
  ): TypedContractMethod<[_operator: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEntityByOwner"
  ): TypedContractMethod<[_owner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEntityByResource"
  ): TypedContractMethod<[_resource: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRole"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isResourceOperator"
  ): TypedContractMethod<
    [_resource: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isResourceOwner"
  ): TypedContractMethod<
    [_resource: AddressLike, _owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<
    [_name: string, _operator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeResource"
  ): TypedContractMethod<
    [_name: string, _resource: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeRole"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "setRole"
  ): TypedContractMethod<
    [_address: AddressLike, _role: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoles"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _roles: BigNumberish[]],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setServiceOwner"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "nonpayable">;

  getEvent(
    key: "DSTrustServiceRoleAdded"
  ): TypedContractEvent<
    DSTrustServiceRoleAddedEvent.InputTuple,
    DSTrustServiceRoleAddedEvent.OutputTuple,
    DSTrustServiceRoleAddedEvent.OutputObject
  >;
  getEvent(
    key: "DSTrustServiceRoleRemoved"
  ): TypedContractEvent<
    DSTrustServiceRoleRemovedEvent.InputTuple,
    DSTrustServiceRoleRemovedEvent.OutputTuple,
    DSTrustServiceRoleRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "DSTrustServiceRoleAdded(address,uint8,address)": TypedContractEvent<
      DSTrustServiceRoleAddedEvent.InputTuple,
      DSTrustServiceRoleAddedEvent.OutputTuple,
      DSTrustServiceRoleAddedEvent.OutputObject
    >;
    DSTrustServiceRoleAdded: TypedContractEvent<
      DSTrustServiceRoleAddedEvent.InputTuple,
      DSTrustServiceRoleAddedEvent.OutputTuple,
      DSTrustServiceRoleAddedEvent.OutputObject
    >;

    "DSTrustServiceRoleRemoved(address,uint8,address)": TypedContractEvent<
      DSTrustServiceRoleRemovedEvent.InputTuple,
      DSTrustServiceRoleRemovedEvent.OutputTuple,
      DSTrustServiceRoleRemovedEvent.OutputObject
    >;
    DSTrustServiceRoleRemoved: TypedContractEvent<
      DSTrustServiceRoleRemovedEvent.InputTuple,
      DSTrustServiceRoleRemovedEvent.OutputTuple,
      DSTrustServiceRoleRemovedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
