/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Utils__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "IBulkOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBulkOperator__factory>;
    getContractFactory(
      name: "ComplianceConfigurationService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceConfigurationService__factory>;
    getContractFactory(
      name: "ComplianceService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceService__factory>;
    getContractFactory(
      name: "ComplianceServiceNotRegulated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceServiceNotRegulated__factory>;
    getContractFactory(
      name: "ComplianceServiceLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceServiceLibrary__factory>;
    getContractFactory(
      name: "ComplianceServiceRegulated",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceServiceRegulated__factory>;
    getContractFactory(
      name: "ComplianceServicePartitionedLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceServicePartitionedLibrary__factory>;
    getContractFactory(
      name: "ComplianceServiceRegulatedPartitioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceServiceRegulatedPartitioned__factory>;
    getContractFactory(
      name: "ComplianceServiceWhitelisted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceServiceWhitelisted__factory>;
    getContractFactory(
      name: "IDSComplianceConfigurationService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSComplianceConfigurationService__factory>;
    getContractFactory(
      name: "IDSComplianceService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSComplianceService__factory>;
    getContractFactory(
      name: "IDSComplianceServicePartitioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSComplianceServicePartitioned__factory>;
    getContractFactory(
      name: "IDSLockManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSLockManager__factory>;
    getContractFactory(
      name: "IDSLockManagerPartitioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSLockManagerPartitioned__factory>;
    getContractFactory(
      name: "IDSPartitionsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSPartitionsManager__factory>;
    getContractFactory(
      name: "IDSWalletManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSWalletManager__factory>;
    getContractFactory(
      name: "InvestorLockManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvestorLockManager__factory>;
    getContractFactory(
      name: "InvestorLockManagerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvestorLockManagerBase__factory>;
    getContractFactory(
      name: "InvestorLockManagerPartitioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvestorLockManagerPartitioned__factory>;
    getContractFactory(
      name: "LockManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockManager__factory>;
    getContractFactory(
      name: "PartitionsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PartitionsManager__factory>;
    getContractFactory(
      name: "WalletManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletManager__factory>;
    getContractFactory(
      name: "ComplianceConfigurationDataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComplianceConfigurationDataStore__factory>;
    getContractFactory(
      name: "OmnibusControllerDataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmnibusControllerDataStore__factory>;
    getContractFactory(
      name: "RegistryServiceDataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryServiceDataStore__factory>;
    getContractFactory(
      name: "TokenDataStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenDataStore__factory>;
    getContractFactory(
      name: "IDSTokenIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSTokenIssuer__factory>;
    getContractFactory(
      name: "TokenIssuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenIssuer__factory>;
    getContractFactory(
      name: "StandardTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardTokenMock__factory>;
    getContractFactory(
      name: "TestCalls",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestCalls__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "IDSOmnibusTBEController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSOmnibusTBEController__factory>;
    getContractFactory(
      name: "IDSOmnibusWalletController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSOmnibusWalletController__factory>;
    getContractFactory(
      name: "IDSTokenReallocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSTokenReallocator__factory>;
    getContractFactory(
      name: "OmnibusTBEController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmnibusTBEController__factory>;
    getContractFactory(
      name: "OmnibusTBEControllerWhitelisted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmnibusTBEControllerWhitelisted__factory>;
    getContractFactory(
      name: "OmnibusWalletController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OmnibusWalletController__factory>;
    getContractFactory(
      name: "TokenReallocator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenReallocator__factory>;
    getContractFactory(
      name: "IDSRegistryService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSRegistryService__factory>;
    getContractFactory(
      name: "IDSWalletRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSWalletRegistrar__factory>;
    getContractFactory(
      name: "RegistryService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryService__factory>;
    getContractFactory(
      name: "WalletRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletRegistrar__factory>;
    getContractFactory(
      name: "IDSServiceConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSServiceConsumer__factory>;
    getContractFactory(
      name: "ServiceConsumer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceConsumer__factory>;
    getContractFactory(
      name: "BaseSecuritizeSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseSecuritizeSwap__factory>;
    getContractFactory(
      name: "DSToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSToken__factory>;
    getContractFactory(
      name: "DSTokenPartitioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DSTokenPartitioned__factory>;
    getContractFactory(
      name: "IDSToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSToken__factory>;
    getContractFactory(
      name: "IDSTokenPartitioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSTokenPartitioned__factory>;
    getContractFactory(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardToken__factory>;
    getContractFactory(
      name: "TokenLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLibrary__factory>;
    getContractFactory(
      name: "TokenPartitionsLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenPartitionsLibrary__factory>;
    getContractFactory(
      name: "IDSTrustService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDSTrustService__factory>;
    getContractFactory(
      name: "TrustService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustService__factory>;
    getContractFactory(
      name: "DeploymentUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeploymentUtils__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "MultiSigWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSigWallet__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransactionRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionRelayer__factory>;
    getContractFactory(
      name: "VersionedContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VersionedContract__factory>;

    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IBeacon",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Utils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Utils>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "IBulkOperator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBulkOperator>;
    getContractAt(
      name: "ComplianceConfigurationService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceConfigurationService>;
    getContractAt(
      name: "ComplianceService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceService>;
    getContractAt(
      name: "ComplianceServiceNotRegulated",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceServiceNotRegulated>;
    getContractAt(
      name: "ComplianceServiceLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceServiceLibrary>;
    getContractAt(
      name: "ComplianceServiceRegulated",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceServiceRegulated>;
    getContractAt(
      name: "ComplianceServicePartitionedLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceServicePartitionedLibrary>;
    getContractAt(
      name: "ComplianceServiceRegulatedPartitioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceServiceRegulatedPartitioned>;
    getContractAt(
      name: "ComplianceServiceWhitelisted",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceServiceWhitelisted>;
    getContractAt(
      name: "IDSComplianceConfigurationService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSComplianceConfigurationService>;
    getContractAt(
      name: "IDSComplianceService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSComplianceService>;
    getContractAt(
      name: "IDSComplianceServicePartitioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSComplianceServicePartitioned>;
    getContractAt(
      name: "IDSLockManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSLockManager>;
    getContractAt(
      name: "IDSLockManagerPartitioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSLockManagerPartitioned>;
    getContractAt(
      name: "IDSPartitionsManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSPartitionsManager>;
    getContractAt(
      name: "IDSWalletManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSWalletManager>;
    getContractAt(
      name: "InvestorLockManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InvestorLockManager>;
    getContractAt(
      name: "InvestorLockManagerBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InvestorLockManagerBase>;
    getContractAt(
      name: "InvestorLockManagerPartitioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InvestorLockManagerPartitioned>;
    getContractAt(
      name: "LockManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LockManager>;
    getContractAt(
      name: "PartitionsManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PartitionsManager>;
    getContractAt(
      name: "WalletManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletManager>;
    getContractAt(
      name: "ComplianceConfigurationDataStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ComplianceConfigurationDataStore>;
    getContractAt(
      name: "OmnibusControllerDataStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmnibusControllerDataStore>;
    getContractAt(
      name: "RegistryServiceDataStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryServiceDataStore>;
    getContractAt(
      name: "TokenDataStore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenDataStore>;
    getContractAt(
      name: "IDSTokenIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSTokenIssuer>;
    getContractAt(
      name: "TokenIssuer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenIssuer>;
    getContractAt(
      name: "StandardTokenMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardTokenMock>;
    getContractAt(
      name: "TestCalls",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestCalls>;
    getContractAt(
      name: "TestToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "IDSOmnibusTBEController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSOmnibusTBEController>;
    getContractAt(
      name: "IDSOmnibusWalletController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSOmnibusWalletController>;
    getContractAt(
      name: "IDSTokenReallocator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSTokenReallocator>;
    getContractAt(
      name: "OmnibusTBEController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmnibusTBEController>;
    getContractAt(
      name: "OmnibusTBEControllerWhitelisted",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmnibusTBEControllerWhitelisted>;
    getContractAt(
      name: "OmnibusWalletController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OmnibusWalletController>;
    getContractAt(
      name: "TokenReallocator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenReallocator>;
    getContractAt(
      name: "IDSRegistryService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSRegistryService>;
    getContractAt(
      name: "IDSWalletRegistrar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSWalletRegistrar>;
    getContractAt(
      name: "RegistryService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryService>;
    getContractAt(
      name: "WalletRegistrar",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletRegistrar>;
    getContractAt(
      name: "IDSServiceConsumer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSServiceConsumer>;
    getContractAt(
      name: "ServiceConsumer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ServiceConsumer>;
    getContractAt(
      name: "BaseSecuritizeSwap",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseSecuritizeSwap>;
    getContractAt(
      name: "DSToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSToken>;
    getContractAt(
      name: "DSTokenPartitioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DSTokenPartitioned>;
    getContractAt(
      name: "IDSToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSToken>;
    getContractAt(
      name: "IDSTokenPartitioned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSTokenPartitioned>;
    getContractAt(
      name: "StandardToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardToken>;
    getContractAt(
      name: "TokenLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenLibrary>;
    getContractAt(
      name: "TokenPartitionsLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenPartitionsLibrary>;
    getContractAt(
      name: "IDSTrustService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDSTrustService>;
    getContractAt(
      name: "TrustService",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustService>;
    getContractAt(
      name: "DeploymentUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DeploymentUtils>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "Migrations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "MultiSigWallet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSigWallet>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransactionRelayer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionRelayer>;
    getContractAt(
      name: "VersionedContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VersionedContract>;

    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "IBulkOperator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBulkOperator>;
    deployContract(
      name: "ComplianceConfigurationService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceConfigurationService>;
    deployContract(
      name: "ComplianceService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceService>;
    deployContract(
      name: "ComplianceServiceNotRegulated",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceNotRegulated>;
    deployContract(
      name: "ComplianceServiceLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceLibrary>;
    deployContract(
      name: "ComplianceServiceRegulated",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceRegulated>;
    deployContract(
      name: "ComplianceServicePartitionedLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServicePartitionedLibrary>;
    deployContract(
      name: "ComplianceServiceRegulatedPartitioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceRegulatedPartitioned>;
    deployContract(
      name: "ComplianceServiceWhitelisted",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceWhitelisted>;
    deployContract(
      name: "IDSComplianceConfigurationService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSComplianceConfigurationService>;
    deployContract(
      name: "IDSComplianceService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSComplianceService>;
    deployContract(
      name: "IDSComplianceServicePartitioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSComplianceServicePartitioned>;
    deployContract(
      name: "IDSLockManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSLockManager>;
    deployContract(
      name: "IDSLockManagerPartitioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSLockManagerPartitioned>;
    deployContract(
      name: "IDSPartitionsManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSPartitionsManager>;
    deployContract(
      name: "IDSWalletManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSWalletManager>;
    deployContract(
      name: "InvestorLockManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InvestorLockManager>;
    deployContract(
      name: "InvestorLockManagerBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InvestorLockManagerBase>;
    deployContract(
      name: "InvestorLockManagerPartitioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InvestorLockManagerPartitioned>;
    deployContract(
      name: "LockManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LockManager>;
    deployContract(
      name: "PartitionsManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PartitionsManager>;
    deployContract(
      name: "WalletManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletManager>;
    deployContract(
      name: "ComplianceConfigurationDataStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceConfigurationDataStore>;
    deployContract(
      name: "OmnibusControllerDataStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusControllerDataStore>;
    deployContract(
      name: "RegistryServiceDataStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryServiceDataStore>;
    deployContract(
      name: "TokenDataStore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenDataStore>;
    deployContract(
      name: "IDSTokenIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTokenIssuer>;
    deployContract(
      name: "TokenIssuer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenIssuer>;
    deployContract(
      name: "StandardTokenMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardTokenMock>;
    deployContract(
      name: "TestCalls",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestCalls>;
    deployContract(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestToken>;
    deployContract(
      name: "IDSOmnibusTBEController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSOmnibusTBEController>;
    deployContract(
      name: "IDSOmnibusWalletController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSOmnibusWalletController>;
    deployContract(
      name: "IDSTokenReallocator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTokenReallocator>;
    deployContract(
      name: "OmnibusTBEController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusTBEController>;
    deployContract(
      name: "OmnibusTBEControllerWhitelisted",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusTBEControllerWhitelisted>;
    deployContract(
      name: "OmnibusWalletController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusWalletController>;
    deployContract(
      name: "TokenReallocator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReallocator>;
    deployContract(
      name: "IDSRegistryService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSRegistryService>;
    deployContract(
      name: "IDSWalletRegistrar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSWalletRegistrar>;
    deployContract(
      name: "RegistryService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryService>;
    deployContract(
      name: "WalletRegistrar",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletRegistrar>;
    deployContract(
      name: "IDSServiceConsumer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSServiceConsumer>;
    deployContract(
      name: "ServiceConsumer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ServiceConsumer>;
    deployContract(
      name: "BaseSecuritizeSwap",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseSecuritizeSwap>;
    deployContract(
      name: "DSToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSToken>;
    deployContract(
      name: "DSTokenPartitioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSTokenPartitioned>;
    deployContract(
      name: "IDSToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSToken>;
    deployContract(
      name: "IDSTokenPartitioned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTokenPartitioned>;
    deployContract(
      name: "StandardToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardToken>;
    deployContract(
      name: "TokenLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenLibrary>;
    deployContract(
      name: "TokenPartitionsLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenPartitionsLibrary>;
    deployContract(
      name: "IDSTrustService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTrustService>;
    deployContract(
      name: "TrustService",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustService>;
    deployContract(
      name: "DeploymentUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DeploymentUtils>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "MultiSigWallet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigWallet>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "TransactionRelayer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransactionRelayer>;
    deployContract(
      name: "VersionedContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionedContract>;

    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "IERC1822Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822Proxiable>;
    deployContract(
      name: "IBeacon",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeacon>;
    deployContract(
      name: "ERC1967Utils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967Utils>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "IBulkOperator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBulkOperator>;
    deployContract(
      name: "ComplianceConfigurationService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceConfigurationService>;
    deployContract(
      name: "ComplianceService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceService>;
    deployContract(
      name: "ComplianceServiceNotRegulated",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceNotRegulated>;
    deployContract(
      name: "ComplianceServiceLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceLibrary>;
    deployContract(
      name: "ComplianceServiceRegulated",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceRegulated>;
    deployContract(
      name: "ComplianceServicePartitionedLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServicePartitionedLibrary>;
    deployContract(
      name: "ComplianceServiceRegulatedPartitioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceRegulatedPartitioned>;
    deployContract(
      name: "ComplianceServiceWhitelisted",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceServiceWhitelisted>;
    deployContract(
      name: "IDSComplianceConfigurationService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSComplianceConfigurationService>;
    deployContract(
      name: "IDSComplianceService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSComplianceService>;
    deployContract(
      name: "IDSComplianceServicePartitioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSComplianceServicePartitioned>;
    deployContract(
      name: "IDSLockManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSLockManager>;
    deployContract(
      name: "IDSLockManagerPartitioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSLockManagerPartitioned>;
    deployContract(
      name: "IDSPartitionsManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSPartitionsManager>;
    deployContract(
      name: "IDSWalletManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSWalletManager>;
    deployContract(
      name: "InvestorLockManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InvestorLockManager>;
    deployContract(
      name: "InvestorLockManagerBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InvestorLockManagerBase>;
    deployContract(
      name: "InvestorLockManagerPartitioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InvestorLockManagerPartitioned>;
    deployContract(
      name: "LockManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LockManager>;
    deployContract(
      name: "PartitionsManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PartitionsManager>;
    deployContract(
      name: "WalletManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletManager>;
    deployContract(
      name: "ComplianceConfigurationDataStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ComplianceConfigurationDataStore>;
    deployContract(
      name: "OmnibusControllerDataStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusControllerDataStore>;
    deployContract(
      name: "RegistryServiceDataStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryServiceDataStore>;
    deployContract(
      name: "TokenDataStore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenDataStore>;
    deployContract(
      name: "IDSTokenIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTokenIssuer>;
    deployContract(
      name: "TokenIssuer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenIssuer>;
    deployContract(
      name: "StandardTokenMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardTokenMock>;
    deployContract(
      name: "TestCalls",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestCalls>;
    deployContract(
      name: "TestToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestToken>;
    deployContract(
      name: "IDSOmnibusTBEController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSOmnibusTBEController>;
    deployContract(
      name: "IDSOmnibusWalletController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSOmnibusWalletController>;
    deployContract(
      name: "IDSTokenReallocator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTokenReallocator>;
    deployContract(
      name: "OmnibusTBEController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusTBEController>;
    deployContract(
      name: "OmnibusTBEControllerWhitelisted",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusTBEControllerWhitelisted>;
    deployContract(
      name: "OmnibusWalletController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OmnibusWalletController>;
    deployContract(
      name: "TokenReallocator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenReallocator>;
    deployContract(
      name: "IDSRegistryService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSRegistryService>;
    deployContract(
      name: "IDSWalletRegistrar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSWalletRegistrar>;
    deployContract(
      name: "RegistryService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RegistryService>;
    deployContract(
      name: "WalletRegistrar",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.WalletRegistrar>;
    deployContract(
      name: "IDSServiceConsumer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSServiceConsumer>;
    deployContract(
      name: "ServiceConsumer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ServiceConsumer>;
    deployContract(
      name: "BaseSecuritizeSwap",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseSecuritizeSwap>;
    deployContract(
      name: "DSToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSToken>;
    deployContract(
      name: "DSTokenPartitioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DSTokenPartitioned>;
    deployContract(
      name: "IDSToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSToken>;
    deployContract(
      name: "IDSTokenPartitioned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTokenPartitioned>;
    deployContract(
      name: "StandardToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StandardToken>;
    deployContract(
      name: "TokenLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenLibrary>;
    deployContract(
      name: "TokenPartitionsLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenPartitionsLibrary>;
    deployContract(
      name: "IDSTrustService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDSTrustService>;
    deployContract(
      name: "TrustService",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustService>;
    deployContract(
      name: "DeploymentUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DeploymentUtils>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "Migrations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Migrations>;
    deployContract(
      name: "MultiSigWallet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiSigWallet>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "TransactionRelayer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransactionRelayer>;
    deployContract(
      name: "VersionedContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VersionedContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
